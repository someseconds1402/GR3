{"ast":null,"code":"var _jsxFileName = \"D:\\\\Don't Click Here\\\\2022_2\\\\code_2\\\\client\\\\src\\\\components\\\\subscreen\\\\expert\\\\EpidemicAnalyse_New.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport MainFrame from '../../mainframe/MainFrame';\nimport { useNavigate } from 'react-router-dom';\nimport { PATH } from '../../../constant/constant';\nimport { getPandemicDataAPI, getEpidemicDataOfAllProvincesAPI } from '../../../service/userService';\nimport Dropdown from '../../dropdown/Dropdown';\nimport province from '../../../constant/province';\nimport MyDatePicker from '../../datepicker/DatePicker';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeEpidemicDataAnalyse, sortWithLevel } from '../../../store/reducer/epidemicDataAnalyseSlice';\n\n// Excel\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport WeightTable from './epidemictable/WeightTable';\nimport EpidemicTable_New from './epidemictable/EpidemicTable_New';\nimport S_SMC_FCM from '../../../logic/sSMC_FCM';\nimport WeightTableEpidemic from './epidemictable/WeightTableEpidemic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EpidemicAnalyse_New() {\n  _s();\n  const navigate = useNavigate();\n  const EpidemicData = useSelector(state => state.epidemicDataAnalyse.data);\n  const dispatch = useDispatch();\n  const [pandemicData, setPandemicData] = useState([]);\n  const [pandemicSelect, setPandemicSelect] = useState(1);\n  const [dateSelect, setDateSelect] = useState(\"2022-07-15\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [showWeightTable, setShowWeightTable] = useState(false);\n  const [weight, setWeight] = useState([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n  const [isShowWeight, setIsShowWeight] = useState(false);\n  const changePandemic = option => {\n    // console.log('pandemic', pandemicData);\n    setPandemicSelect(2);\n  };\n  const changeDate = date => {\n    setDateSelect(date);\n  };\n  const changeIsShowWeight = event => {\n    setIsShowWeight(event.target.checked);\n  };\n  const closeDialog = data => {\n    console.log(data);\n    if (data) {\n      setWeight(data);\n    }\n    setShowWeightTable(false);\n  };\n  const Clust = async () => {\n    let U = EpidemicData.map(e => {\n      return {\n        \"province_id\": e.province_id,\n        \"province_name\": e.province_name,\n        \"population\": e.population,\n        \"population_density\": e.population_density,\n        \"level\": e.level,\n        \"infection_new\": e.infection_new,\n        \"infection_total\": e.infection_total,\n        \"infection_average\": e.infection_average,\n        \"recovered_new\": e.recovered_new,\n        \"recovered_total\": e.recovered_total,\n        \"recovered_average\": e.recovered_average,\n        \"death_new\": e.death_new,\n        \"death_total\": e.death_total,\n        \"death_average\": e.death_average\n      };\n    });\n    // console.log(U);\n    const C = [1, 2]; // Danh sách các nhãn cần phân cụm\n\n    const tagField = 'level'; // Trường dữ liệu chứa nhãn\n\n    const keys = ['province_name', 'province_id']; // Các trường dữ liệu không tham gia vào việc phân cụm\n\n    // Tạo một đối tượng thuật toán phân cụm\n    const algorithm = new S_SMC_FCM(U, C, tagField, keys);\n\n    // Chạy thuật toán\n    algorithm.run().then(() => {\n      // Khi thuật toán hoàn thành, lấy kết quả\n      const result = algorithm.X;\n      dispatch(changeEpidemicDataAnalyse({\n        data: result.map(e => {\n          return {\n            \"province_id\": e.province_id,\n            \"province_name\": e.province_name,\n            \"population\": e.population,\n            \"population_density\": e.population_density,\n            \"level\": e.cluster_label,\n            \"infection_new\": e.infection_new,\n            \"infection_total\": e.infection_total,\n            \"infection_average\": e.infection_average,\n            \"recovered_new\": e.recovered_new,\n            \"recovered_total\": e.recovered_total,\n            \"recovered_average\": e.recovered_average,\n            \"death_new\": e.death_new,\n            \"death_total\": e.death_total,\n            \"death_average\": e.death_average\n          };\n        })\n      }));\n      dispatch(sortWithLevel());\n      console.log(result);\n    }).catch(error => {\n      console.error('Đã xảy ra lỗi:', error);\n    });\n  };\n  const downloadFile = () => {\n    const currentTime = new Date().getTime();\n    const fileName = `${currentTime}_EpidemicAnalyse.xlsx`;\n    // Tạo workbook mới\n    const workbook = XLSX.utils.book_new();\n\n    // Convert data to worksheet format\n    const worksheet = XLSX.utils.json_to_sheet(EpidemicData);\n    // console.log(fileName, workbook, worksheet);\n    // Append worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n    // Write workbook to Excel file\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'buffer'\n    });\n    // Create a Blob from the buffer\n    const blob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    // Download the file\n    saveAs(blob, fileName);\n  };\n  useEffect(() => {\n    if (localStorage.getItem('role') != 1) {\n      navigate(PATH.HOME);\n    }\n    const fetchData = async () => {\n      try {\n        const pandemicDataSrevice = await getPandemicDataAPI();\n        setPandemicData(pandemicDataSrevice);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getEpidemicDataOfAllProvincesAPI(pandemicSelect, dateSelect);\n        data.forEach(e => {\n          if (!e.level) {\n            e.level = 0;\n          }\n        });\n        const res = data.map(dt => {\n          const infectionLst = dt.infection.list;\n          const recoveredLst = dt.recovered.list;\n          const deathLst = dt.death.list;\n          let infectionAverage = 0;\n          let recoveredAverage = 0;\n          let deathAverage = 0;\n          infectionLst.forEach(e => {\n            infectionAverage += e.quantity_in_today;\n          });\n          recoveredLst.forEach(e => {\n            recoveredAverage += e.quantity_in_today;\n          });\n          deathLst.forEach(e => {\n            deathAverage += e.quantity_in_today;\n          });\n          return {\n            province_id: dt.province_id,\n            province_name: province[dt.province_id - 1],\n            population: dt.population,\n            population_density: dt.population_density,\n            level: dt.level,\n            infection_new: infectionLst[infectionLst.length - 1].quantity_in_today,\n            infection_total: infectionLst[infectionLst.length - 1].total_quantity,\n            infection_average: parseFloat((infectionAverage / infectionLst.length).toFixed(2)),\n            recovered_new: recoveredLst[recoveredLst.length - 1].quantity_in_today,\n            recovered_total: recoveredLst[recoveredLst.length - 1].total_quantity,\n            recovered_average: parseFloat((recoveredAverage / recoveredLst.length).toFixed(2)),\n            death_new: deathLst[deathLst.length - 1].quantity_in_today,\n            death_total: deathLst[deathLst.length - 1].total_quantity,\n            death_average: parseFloat((deathAverage / deathLst.length).toFixed(2))\n          };\n        });\n        dispatch(changeEpidemicDataAnalyse({\n          data: res\n        }));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, [pandemicSelect, dateSelect]);\n  return /*#__PURE__*/_jsxDEV(MainFrame, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ph\\xE2n t\\xEDch t\\xECnh h\\xECnh d\\u1ECBch b\\u1EC7nh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4 mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          data: pandemicData.map(e => e.pandemic_name),\n          func: changePandemic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyDatePicker, {\n          func: changeDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-lg flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"h-6 w-6\",\n              type: \"checkbox\",\n              checked: isShowWeight,\n              onChange: changeIsShowWeight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-1\",\n              children: \"Xem tr\\u1ECDng s\\u1ED1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-primary w-full\",\n          onClick: () => {\n            setShowWeightTable(true);\n          },\n          children: \"Thi\\u1EBFt l\\u1EADp tr\\u1ECDng s\\u1ED1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), showWeightTable && /*#__PURE__*/_jsxDEV(WeightTableEpidemic, {\n          data: weight,\n          func: closeDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-primary w-full mt-4\",\n          onClick: Clust,\n          children: \"Ph\\xE2n c\\u1EE5m\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-success w-full mt-4\",\n          onClick: downloadFile,\n          children: \"Download d\\u1EEF li\\u1EC7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: /*#__PURE__*/_jsxDEV(EpidemicTable_New, {\n        weightData: weight,\n        isShowWeight: isShowWeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(EpidemicAnalyse_New, \"Bbe5wGOVE7GmwDj1iQEQWpAlJSU=\", false, function () {\n  return [useNavigate, useSelector, useDispatch];\n});\n_c = EpidemicAnalyse_New;\nexport default EpidemicAnalyse_New;\nvar _c;\n$RefreshReg$(_c, \"EpidemicAnalyse_New\");","map":{"version":3,"names":["useState","useEffect","MainFrame","useNavigate","PATH","getPandemicDataAPI","getEpidemicDataOfAllProvincesAPI","Dropdown","province","MyDatePicker","useSelector","useDispatch","changeEpidemicDataAnalyse","sortWithLevel","XLSX","saveAs","WeightTable","EpidemicTable_New","S_SMC_FCM","WeightTableEpidemic","jsxDEV","_jsxDEV","EpidemicAnalyse_New","_s","navigate","EpidemicData","state","epidemicDataAnalyse","data","dispatch","pandemicData","setPandemicData","pandemicSelect","setPandemicSelect","dateSelect","setDateSelect","isLoading","setIsLoading","showWeightTable","setShowWeightTable","weight","setWeight","isShowWeight","setIsShowWeight","changePandemic","option","changeDate","date","changeIsShowWeight","event","target","checked","closeDialog","console","log","Clust","U","map","e","province_id","province_name","population","population_density","level","infection_new","infection_total","infection_average","recovered_new","recovered_total","recovered_average","death_new","death_total","death_average","C","tagField","keys","algorithm","run","then","result","X","cluster_label","catch","error","downloadFile","currentTime","Date","getTime","fileName","workbook","utils","book_new","worksheet","json_to_sheet","book_append_sheet","excelBuffer","write","bookType","type","blob","Blob","localStorage","getItem","HOME","fetchData","pandemicDataSrevice","forEach","res","dt","infectionLst","infection","list","recoveredLst","recovered","deathLst","death","infectionAverage","recoveredAverage","deathAverage","quantity_in_today","length","total_quantity","parseFloat","toFixed","children","_jsxFileName","lineNumber","columnNumber","className","pandemic_name","func","onChange","onClick","weightData","_c","$RefreshReg$"],"sources":["D:/Don't Click Here/2022_2/code_2/client/src/components/subscreen/expert/EpidemicAnalyse_New.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport MainFrame from '../../mainframe/MainFrame'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { PATH } from '../../../constant/constant';\r\nimport { getPandemicDataAPI, getEpidemicDataOfAllProvincesAPI } from '../../../service/userService'\r\nimport Dropdown from '../../dropdown/Dropdown';\r\nimport province from '../../../constant/province'\r\nimport MyDatePicker from '../../datepicker/DatePicker';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeEpidemicDataAnalyse, sortWithLevel, } from '../../../store/reducer/epidemicDataAnalyseSlice';\r\n\r\n// Excel\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport WeightTable from './epidemictable/WeightTable';\r\nimport EpidemicTable_New from './epidemictable/EpidemicTable_New';\r\nimport S_SMC_FCM from '../../../logic/sSMC_FCM';\r\nimport WeightTableEpidemic from './epidemictable/WeightTableEpidemic';\r\n\r\nfunction EpidemicAnalyse_New() {\r\n  const navigate = useNavigate();\r\n  const EpidemicData = useSelector((state) => state.epidemicDataAnalyse.data);\r\n  const dispatch = useDispatch();\r\n\r\n  const [pandemicData, setPandemicData] = useState([]);\r\n  \r\n  const [pandemicSelect, setPandemicSelect] = useState(1);\r\n  const [dateSelect, setDateSelect] = useState(\"2022-07-15\");\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showWeightTable, setShowWeightTable] = useState(false);\r\n  const [weight, setWeight] = useState([1,1,1,1,1,1,1,1,1,1,1]);\r\n  const [isShowWeight, setIsShowWeight] = useState(false);\r\n\r\n  const changePandemic = (option)=>{\r\n    // console.log('pandemic', pandemicData);\r\n    setPandemicSelect(2)\r\n  }\r\n\r\n  const changeDate = (date) => {\r\n    setDateSelect(date);\r\n  }\r\n\r\n  const changeIsShowWeight = (event) => {\r\n    setIsShowWeight(event.target.checked);\r\n  }\r\n\r\n  const closeDialog = (data)=>{\r\n    console.log(data);\r\n    if(data){\r\n      setWeight(data)\r\n    }\r\n    setShowWeightTable(false);\r\n  }\r\n\r\n  const Clust = async () => {\r\n    let U = EpidemicData.map(e=>{\r\n      return {\r\n        \"province_id\": e.province_id,\r\n        \"province_name\": e.province_name,\r\n        \"population\": e.population,\r\n        \"population_density\": e.population_density,\r\n        \"level\": e.level,\r\n        \"infection_new\": e.infection_new,\r\n        \"infection_total\": e.infection_total,\r\n        \"infection_average\": e.infection_average,\r\n        \"recovered_new\": e.recovered_new,\r\n        \"recovered_total\": e.recovered_total,\r\n        \"recovered_average\": e.recovered_average,\r\n        \"death_new\": e.death_new,\r\n        \"death_total\": e.death_total,\r\n        \"death_average\": e.death_average,\r\n      }\r\n    });\r\n    // console.log(U);\r\n    const C = [1, 2]; // Danh sách các nhãn cần phân cụm\r\n    \r\n    const tagField = 'level'; // Trường dữ liệu chứa nhãn\r\n    \r\n    const keys = ['province_name', 'province_id']; // Các trường dữ liệu không tham gia vào việc phân cụm\r\n    \r\n    // Tạo một đối tượng thuật toán phân cụm\r\n    const algorithm = new S_SMC_FCM(U, C, tagField, keys);\r\n    \r\n    // Chạy thuật toán\r\n    algorithm.run()\r\n      .then(() => {\r\n        // Khi thuật toán hoàn thành, lấy kết quả\r\n        const result = algorithm.X;\r\n        dispatch(changeEpidemicDataAnalyse({data: result.map(e=>{\r\n          return {\r\n            \"province_id\": e.province_id,\r\n            \"province_name\": e.province_name,\r\n            \"population\": e.population,\r\n            \"population_density\": e.population_density,\r\n            \"level\": e.cluster_label,\r\n            \"infection_new\": e.infection_new,\r\n            \"infection_total\": e.infection_total,\r\n            \"infection_average\": e.infection_average,\r\n            \"recovered_new\": e.recovered_new,\r\n            \"recovered_total\": e.recovered_total,\r\n            \"recovered_average\": e.recovered_average,\r\n            \"death_new\": e.death_new,\r\n            \"death_total\": e.death_total,\r\n            \"death_average\": e.death_average,\r\n          }\r\n        })}))\r\n        dispatch(sortWithLevel())\r\n        console.log(result);\r\n      })\r\n      .catch(error => {\r\n        console.error('Đã xảy ra lỗi:', error);\r\n      });\r\n  }\r\n\r\n  const downloadFile = () => {\r\n    const currentTime = new Date().getTime();\r\n    const fileName = `${currentTime}_EpidemicAnalyse.xlsx`;\r\n    // Tạo workbook mới\r\n    const workbook = XLSX.utils.book_new();\r\n\r\n    // Convert data to worksheet format\r\n    const worksheet = XLSX.utils.json_to_sheet(EpidemicData);\r\n    // console.log(fileName, workbook, worksheet);\r\n    // Append worksheet to workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n    // Write workbook to Excel file\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\r\n    // Create a Blob from the buffer\r\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    // Download the file\r\n    saveAs(blob, fileName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem('role') != 1){\r\n      navigate(PATH.HOME);\r\n    }\r\n    const fetchData = async () => {\r\n      try {\r\n        const pandemicDataSrevice = await getPandemicDataAPI();\r\n        setPandemicData(pandemicDataSrevice);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getEpidemicDataOfAllProvincesAPI(pandemicSelect, dateSelect);\r\n        data.forEach(e=>{\r\n          if(!e.level){\r\n            e.level = 0;\r\n          }\r\n        })\r\n        const res = data.map(dt=>{\r\n          const infectionLst = dt.infection.list;\r\n          const recoveredLst = dt.recovered.list;\r\n          const deathLst = dt.death.list;\r\n          let infectionAverage = 0;\r\n          let recoveredAverage = 0;\r\n          let deathAverage = 0;\r\n    \r\n          infectionLst.forEach(e=>{\r\n            infectionAverage += e.quantity_in_today;\r\n          });\r\n          recoveredLst.forEach(e=>{\r\n            recoveredAverage += e.quantity_in_today;\r\n          });\r\n          deathLst.forEach(e=>{\r\n            deathAverage += e.quantity_in_today;\r\n          });\r\n    \r\n          return {\r\n            province_id: dt.province_id,\r\n            province_name: province[dt.province_id-1],\r\n            population: dt.population,\r\n            population_density: dt.population_density,\r\n            level: dt.level,\r\n            infection_new: infectionLst[infectionLst.length-1].quantity_in_today,\r\n            infection_total: infectionLst[infectionLst.length-1].total_quantity,\r\n            infection_average: parseFloat((infectionAverage/(infectionLst.length)).toFixed(2)),\r\n            recovered_new: recoveredLst[recoveredLst.length-1].quantity_in_today,\r\n            recovered_total: recoveredLst[recoveredLst.length-1].total_quantity,\r\n            recovered_average: parseFloat((recoveredAverage/(recoveredLst.length)).toFixed(2)),\r\n            death_new: deathLst[deathLst.length-1].quantity_in_today,\r\n            death_total: deathLst[deathLst.length-1].total_quantity,\r\n            death_average: parseFloat((deathAverage/(deathLst.length)).toFixed(2)),\r\n          }\r\n        });\r\n        dispatch(changeEpidemicDataAnalyse({data: res}))\r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pandemicSelect, dateSelect]);\r\n\r\n\r\n  return (\r\n    <MainFrame>\r\n      <h1>Phân tích tình hình dịch bệnh</h1>\r\n      <div className=\"grid grid-cols-3 gap-4 mt-5\">\r\n        <div className=\"col-span-1\">\r\n          <Dropdown data={pandemicData.map(e=>e.pandemic_name)} func={changePandemic}/>\r\n          <MyDatePicker func={changeDate}/>\r\n          <div className=\"w-full mt-4\">\r\n            <label className='text-lg flex items-center'>\r\n              <input className='h-6 w-6' type=\"checkbox\" checked={isShowWeight} onChange={changeIsShowWeight} />\r\n              <span className='ml-1'>Xem trọng số</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-span-1\"></div>\r\n        <div className=\"col-span-1\">\r\n          <div className=\"btn btn-primary w-full\" onClick={()=>{setShowWeightTable(true)}}>Thiết lập trọng số</div>\r\n          {showWeightTable && <WeightTableEpidemic data={weight} func={closeDialog}/>}\r\n          <div className=\"btn btn-primary w-full mt-4\" onClick={Clust}>Phân cụm</div>\r\n          <div className=\"btn btn-success w-full mt-4\" onClick={downloadFile}>Download dữ liệu</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-5\">\r\n        <EpidemicTable_New weightData={weight} isShowWeight={isShowWeight} />\r\n\r\n      </div>\r\n    </MainFrame>\r\n  )\r\n}\r\n\r\nexport default EpidemicAnalyse_New"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}