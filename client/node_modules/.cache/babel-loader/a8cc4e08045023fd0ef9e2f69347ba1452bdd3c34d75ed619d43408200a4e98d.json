{"ast":null,"code":"var _jsxFileName = \"D:\\\\Don't Click Here\\\\2022_2\\\\code_2\\\\client\\\\src\\\\components\\\\subscreen\\\\guest\\\\EpidemicDisplay.jsx\",\n  _s = $RefreshSig$();\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeEpidemicData, changeEpidemicOption } from '../../../store/reducer/changeEpidemicDataSlice';\nimport { useState, useEffect } from 'react';\nimport MainFrame from '../../mainframe/MainFrame';\nimport { getEpidemicDataAPI } from '../../../service/userService';\nimport LineChart from '../../chart/LineChart';\nimport Dropdown from '../../dropdown/Dropdown';\nimport province from './../../../constant/province';\nimport MyDatePicker from '../../datepicker/DatePicker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EpidemicDisplay() {\n  _s();\n  const EpidemicData = useSelector(state => state.changeEpidemicData.data);\n  const dispatch = useDispatch();\n  const [chartData, setChartData] = useState({\n    labels: ['No name'],\n    datasets: [{\n      label: \"No name\",\n      data: [0]\n    }]\n  });\n  const getEpidemicData = async (province_id, pandemic_id, date) => {\n    const data = await getEpidemicDataAPI(province_id, pandemic_id, date);\n    dispatch(changeEpidemicData({\n      data\n    }));\n    console.log(data);\n    setChartData({\n      labels: data.dateRange,\n      datasets: [{\n        label: data.infection.title,\n        data: data.infection.list.map(e => e.quantity_in_today),\n        borderColor: 'blue',\n        backgroundColor: 'blue'\n      }, {\n        label: data.recovered.title,\n        data: data.recovered.list.map(e => e.quantity_in_today),\n        borderColor: 'green',\n        backgroundColor: 'green'\n      }, {\n        label: data.death.title,\n        data: data.death.list.map(e => e.quantity_in_today),\n        borderColor: 'red',\n        backgroundColor: 'red'\n      }]\n    });\n  };\n  const changeOption = order => {\n    dispatch(changeEpidemicOption({\n      order: order\n    }));\n  };\n  const changeProvince = option => {\n    const province_id = province.indexOf(option);\n    getEpidemicData(province_id, 2, \"2022-7-18\");\n  };\n  const changeDate = date => {\n    getEpidemicData(localStorage.getItem('epidemicDisplay_selectedProvinceId'), 2, date);\n  };\n  useEffect(() => {\n    // getEpidemicData(2, 2, \"2022-7-18\");\n  });\n  return /*#__PURE__*/_jsxDEV(MainFrame, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tra c\\u1EE9u t\\xECnh h\\xECnh d\\u1ECBch b\\u1EC7nh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-4 mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1 \",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          data: province,\n          func: changeProvince\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyDatePicker, {\n          func: changeDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-3\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(EpidemicDisplay, \"HytO+LLz7aPbp3V0iXbfkBt21sg=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = EpidemicDisplay;\nexport default EpidemicDisplay;\nvar _c;\n$RefreshReg$(_c, \"EpidemicDisplay\");","map":{"version":3,"names":["useSelector","useDispatch","changeEpidemicData","changeEpidemicOption","useState","useEffect","MainFrame","getEpidemicDataAPI","LineChart","Dropdown","province","MyDatePicker","jsxDEV","_jsxDEV","EpidemicDisplay","_s","EpidemicData","state","data","dispatch","chartData","setChartData","labels","datasets","label","getEpidemicData","province_id","pandemic_id","date","console","log","dateRange","infection","title","list","map","e","quantity_in_today","borderColor","backgroundColor","recovered","death","changeOption","order","changeProvince","option","indexOf","changeDate","localStorage","getItem","children","fileName","_jsxFileName","lineNumber","columnNumber","className","func","_c","$RefreshReg$"],"sources":["D:/Don't Click Here/2022_2/code_2/client/src/components/subscreen/guest/EpidemicDisplay.jsx"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\r\nimport { changeEpidemicData, changeEpidemicOption } from '../../../store/reducer/changeEpidemicDataSlice';\r\nimport { useState, useEffect } from 'react';\r\nimport MainFrame from '../../mainframe/MainFrame'\r\nimport { getEpidemicDataAPI } from '../../../service/userService'\r\nimport LineChart from '../../chart/LineChart';\r\nimport Dropdown from '../../dropdown/Dropdown';\r\nimport province from './../../../constant/province'\r\nimport MyDatePicker from '../../datepicker/DatePicker';\r\n\r\nfunction EpidemicDisplay() {\r\n  const EpidemicData = useSelector((state) => state.changeEpidemicData.data);\r\n  const dispatch = useDispatch();\r\n  const [chartData, setChartData] = useState({\r\n    labels: ['No name'],\r\n    datasets: [\r\n      {\r\n        label: \"No name\",\r\n        data: [0],\r\n      }\r\n    ]\r\n  });\r\n\r\n  const getEpidemicData = async (province_id, pandemic_id, date) => {\r\n    const data = await getEpidemicDataAPI(province_id, pandemic_id, date);\r\n    dispatch(changeEpidemicData({data}));\r\n    console.log(data);\r\n    setChartData({\r\n      labels: data.dateRange,\r\n      datasets: [\r\n        {\r\n          label: data.infection.title,\r\n          data: data.infection.list.map(e=>e.quantity_in_today),\r\n          borderColor: 'blue',\r\n          backgroundColor: 'blue'\r\n        },\r\n        {\r\n          label: data.recovered.title,\r\n          data: data.recovered.list.map(e=>e.quantity_in_today),\r\n          borderColor: 'green',\r\n          backgroundColor: 'green'\r\n        },\r\n        {\r\n          label: data.death.title,\r\n          data: data.death.list.map(e=>e.quantity_in_today),\r\n          borderColor: 'red',\r\n          backgroundColor: 'red'\r\n        },\r\n      ]\r\n    })\r\n  }\r\n\r\n  const changeOption = (order) => {\r\n    dispatch(changeEpidemicOption({order: order}));\r\n  }\r\n\r\n  const changeProvince = (option)=>{\r\n    const province_id = province.indexOf(option);\r\n    getEpidemicData(province_id, 2, \"2022-7-18\");\r\n  }\r\n\r\n  const changeDate = (date) => {\r\n    getEpidemicData(\r\n      localStorage.getItem('epidemicDisplay_selectedProvinceId'), \r\n      2, \r\n      date\r\n    );\r\n  }\r\n\r\n  useEffect(()=>{\r\n    // getEpidemicData(2, 2, \"2022-7-18\");\r\n  })\r\n\r\n  return (\r\n    <MainFrame>\r\n      <h1>Tra cứu tình hình dịch bệnh</h1>\r\n      <div className=\"grid grid-cols-4 gap-4 mt-5\">\r\n        <div className=\"col-span-1 \">\r\n          {/* <div className=\"mt-4 w-full btn btn-primary\" onClick={getEpidemicData}>Lấy data</div> */}\r\n          <Dropdown data={province} func={changeProvince}/>\r\n          <MyDatePicker func={changeDate}/>\r\n        </div>\r\n        <div className=\"col-span-3\">\r\n          <LineChart data={chartData} />\r\n        </div>\r\n      </div>\r\n    </MainFrame>\r\n  )\r\n}\r\n\r\nexport default EpidemicDisplay"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}