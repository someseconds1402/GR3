{"ast":null,"code":"var _jsxFileName = \"D:\\\\Don't Click Here\\\\2022_2\\\\code_2\\\\client\\\\src\\\\components\\\\subscreen\\\\expert\\\\EpidemicAnalyse_New.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport MainFrame from '../../mainframe/MainFrame';\nimport { useNavigate } from 'react-router-dom';\nimport { PATH } from '../../../constant/constant';\nimport { getPandemicDataAPI, getEpidemicDataOfAllProvincesAPI, clusterAPI } from '../../../service/userService';\nimport Dropdown from '../../dropdown/Dropdown';\nimport province from '../../../constant/province';\nimport MyDatePicker from '../../datepicker/DatePicker';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeEpidemicDataAnalyse, sortWithLevel, resetAllLevel } from '../../../store/reducer/epidemicDataAnalyseSlice';\nimport { enebleLoadingScreen, disableLoadingScreen } from '../../../store/reducer/showLoadingScreenSlice';\n\n// Excel\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport EpidemicTable_New from './epidemictable/EpidemicTable_New';\n// import S_SMC_FCM from '../../../logic/sSMC_FCM';\nimport WeightTableEpidemic from './epidemictable/WeightTableEpidemic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EpidemicAnalyse_New() {\n  _s();\n  const navigate = useNavigate();\n  const EpidemicData = useSelector(state => state.epidemicDataAnalyse.data);\n  const dispatch = useDispatch();\n  const [pandemicData, setPandemicData] = useState([]);\n  const [pandemicSelect, setPandemicSelect] = useState(0);\n  const [dateSelect, setDateSelect] = useState(\"2023-07-15\");\n  const [showTip, setShowTip] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showWeightTable, setShowWeightTable] = useState(false);\n  const [weight, setWeight] = useState([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]);\n  const [isShowWeight, setIsShowWeight] = useState(false);\n  const [showResetData, setShowResetData] = useState(false);\n  const [weightList, setWeightList] = useState({\n    infection_new: 1,\n    infection_average: 1,\n    infection_total: 1,\n    recovered_new: 1,\n    recovered_average: 1,\n    recovered_total: 1,\n    death_new: 1,\n    death_average: 1,\n    death_total: 1,\n    population: 1,\n    population_density: 1\n  });\n  const weightLabel = ['infection_new', 'infection_average', 'infection_total', 'recovered_new', 'recovered_average', 'recovered_total', 'death_new', 'death_average', 'death_total', 'population', 'population_density'];\n  const changePandemic = option => {\n    // console.log('pandemic', pandemicData);\n    setPandemicSelect(pandemicData.find(e => e.pandemic_name == option).pandemic_id);\n  };\n  const changeDate = date => {\n    setDateSelect(date);\n  };\n  const changeIsShowWeight = event => {\n    setIsShowWeight(event.target.checked);\n  };\n  const closeDialog = data => {\n    if (data) {\n      setWeight(data);\n      let weightListTmp = weightList;\n      weightLabel.forEach((e, index) => {\n        weightListTmp[e] = data[index];\n      });\n      setWeightList(weightListTmp);\n      // console.log(weightList);\n    }\n\n    setShowWeightTable(false);\n  };\n  const Clust = async () => {\n    let U = EpidemicData.map(e => {\n      return {\n        \"province_id\": e.province_id,\n        \"province_name\": e.province_name,\n        \"population\": e.population / 1000000,\n        \"population_density\": e.population_density,\n        \"level\": e.level,\n        \"infection_new\": e.infection_new,\n        \"infection_total\": e.infection_total,\n        \"infection_average\": e.infection_average,\n        \"recovered_new\": e.recovered_new,\n        \"recovered_total\": e.recovered_total,\n        \"recovered_average\": e.recovered_average,\n        \"death_new\": e.death_new,\n        \"death_total\": e.death_total,\n        \"death_average\": e.death_average\n      };\n    });\n    // console.log(U, weightList);\n    const C = [1, 2, 3]; // Danh sách các nhãn cần phân cụm\n\n    const tagField = 'level'; // Trường dữ liệu chứa nhãn\n\n    const keys = ['province_name', 'province_id']; // Các trường dữ liệu không tham gia vào việc phân cụm\n\n    dispatch(enebleLoadingScreen());\n    clusterAPI(U, C, tagField, keys, weightList).then(data => {\n      // console.log(data);\n      dispatch(changeEpidemicDataAnalyse({\n        data: data.map(e => {\n          return {\n            \"province_id\": e.province_id,\n            \"province_name\": e.province_name,\n            \"population\": e.population * 1000000,\n            \"population_density\": e.population_density,\n            \"level\": e.cluster_label,\n            \"infection_new\": e.infection_new,\n            \"infection_total\": e.infection_total,\n            \"infection_average\": e.infection_average,\n            \"recovered_new\": e.recovered_new,\n            \"recovered_total\": e.recovered_total,\n            \"recovered_average\": e.recovered_average,\n            \"death_new\": e.death_new,\n            \"death_total\": e.death_total,\n            \"death_average\": e.death_average\n          };\n        })\n      }));\n      dispatch(sortWithLevel());\n      dispatch(disableLoadingScreen());\n      setShowResetData(true);\n    }).catch(error => {\n      console.error('Đã xảy ra lỗi:', error);\n    });\n  };\n  const resetData = () => {\n    dispatch(resetAllLevel());\n    setShowResetData(false);\n  };\n  const downloadFile = () => {\n    const currentTime = new Date().getTime();\n    const fileName = `EpidemicAnalyse_${currentTime}.xlsx`;\n    // Tạo workbook mới\n    const workbook = XLSX.utils.book_new();\n\n    // Convert data to worksheet format\n    const worksheet = XLSX.utils.json_to_sheet(EpidemicData.map(e => {\n      return {\n        province_id: e.province_id,\n        province_name: e.province_name,\n        pandemic_id: pandemicData[pandemicSelect].pandemic_id,\n        pandemic_name: pandemicData[pandemicSelect].pandemic_name,\n        date: dateSelect,\n        level: e.level\n      };\n    }));\n    // console.log(fileName, workbook, worksheet);\n    // Append worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n    // Write workbook to Excel file\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'buffer'\n    });\n    // Create a Blob from the buffer\n    const blob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    // Download the file\n    saveAs(blob, fileName);\n  };\n  useEffect(() => {\n    if (localStorage.getItem('role') != 1) {\n      navigate(PATH.HOME);\n    }\n    const fetchData = async () => {\n      try {\n        const pandemicDataSrevice = await getPandemicDataAPI();\n        setPandemicData(pandemicDataSrevice);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getEpidemicDataOfAllProvincesAPI(pandemicSelect, dateSelect);\n        data.forEach(e => {\n          if (!e.level) {\n            e.level = 0;\n          }\n        });\n        // console.log(data);\n        const res = data.map(dt => {\n          const infectionLst = dt.infection.list;\n          const recoveredLst = dt.recovered.list;\n          const deathLst = dt.death.list;\n          let infection_average = 0,\n            recovered_average = 0,\n            death_average = 0,\n            infection_new = 0,\n            infection_total = 0,\n            recovered_new = 0,\n            recovered_total = 0,\n            death_new = 0,\n            death_total = 0;\n          if (infectionLst.length) {\n            infectionLst.forEach(e => {\n              infection_average += e.quantity_in_today;\n            });\n            infection_new = infectionLst[infectionLst.length - 1].quantity_in_today;\n            infection_total = infectionLst[infectionLst.length - 1].total_quantity;\n            infection_average = parseFloat((infection_average / infectionLst.length).toFixed(2));\n          } else {\n            infection_new = -1;\n            infection_total = -1;\n            infection_average = -1;\n          }\n          if (recoveredLst.length) {\n            recoveredLst.forEach(e => {\n              recovered_average += e.quantity_in_today;\n            });\n            recovered_new = recoveredLst[recoveredLst.length - 1].quantity_in_today;\n            recovered_total = recoveredLst[recoveredLst.length - 1].total_quantity;\n            recovered_average = parseFloat((recovered_average / recoveredLst.length).toFixed(2));\n          } else {\n            recovered_new = -1;\n            recovered_total = -1;\n            recovered_average = -1;\n          }\n          if (deathLst.length) {\n            deathLst.forEach(e => {\n              death_average += e.quantity_in_today;\n            });\n            death_new = deathLst[deathLst.length - 1].quantity_in_today;\n            death_total = deathLst[deathLst.length - 1].total_quantity;\n            death_average = parseFloat((death_average / deathLst.length).toFixed(2));\n          } else {\n            death_new = -1;\n            death_total = -1;\n            death_average = -1;\n          }\n          return {\n            province_id: dt.province_id,\n            province_name: province[dt.province_id - 1],\n            population: dt.population,\n            population_density: dt.population_density,\n            level: dt.level,\n            infection_new: infection_new,\n            infection_total: infection_total,\n            infection_average: infection_average,\n            recovered_new: recovered_new,\n            recovered_total: recovered_total,\n            recovered_average: recovered_average,\n            death_new: death_new,\n            death_total: death_total,\n            death_average: death_average\n          };\n        });\n        console.log('res', res);\n        dispatch(changeEpidemicDataAnalyse({\n          data: res\n        }));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, [pandemicSelect, dateSelect]);\n  return /*#__PURE__*/_jsxDEV(MainFrame, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ph\\xE2n t\\xEDch t\\xECnh h\\xECnh d\\u1ECBch b\\u1EC7nh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4 mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          data: pandemicData.map(e => e.pandemic_name),\n          func: changePandemic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyDatePicker, {\n          func: changeDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-lg flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"h-6 w-6\",\n              type: \"checkbox\",\n              checked: isShowWeight,\n              onChange: changeIsShowWeight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-1\",\n              children: \"Xem tr\\u1ECDng s\\u1ED1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 cursor-pointer\",\n          onClick: () => {\n            setShowTip(!showTip);\n          },\n          children: showTip ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" text-green-900\",\n            children: [\"Vi\\u1EC7c \\u0111\\xE1nh gi\\xE1 c\\u1EA5p \\u0111\\u1ED9 d\\u1ECBch c\\xF3 th\\u1EC3 tham kh\\u1EA3o c\\xF4ng th\\u1EE9c sau:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), \"Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 = \\u03B1 * (H\\u1ED3i ph\\u1EE5c)/(Nhi\\u1EC5m * T\\u1EED vong * M\\u1EADt \\u0111\\u1ED9 d\\xE2n s\\u1ED1).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), \"V\\u1EDBi \\u03B1 l\\xE0 h\\u1EC7 s\\u1ED1 do chuy\\xEAn vi\\xEAn quy\\u1EBFt \\u0111\\u1ECBnh.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this), \"N\\u1EBFu Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 < 0.1 th\\xEC s\\u1EBD \\u0111\\u01B0\\u1EE3c coi l\\xE0 c\\u1EA5p \\u0111\\u1ED9 1 (An to\\xE0n)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this), \"N\\u1EBFu 0.1 < Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 < 0.15 th\\xEC s\\u1EBD \\u0111\\u01B0\\u1EE3c coi l\\xE0 c\\u1EA5p \\u0111\\u1ED9 2 (Ch\\xFA \\xFD)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this), \"N\\u1EBFu Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 > 0.15 th\\xEC s\\u1EBD \\u0111\\u01B0\\u1EE3c coi l\\xE0 c\\u1EA5p \\u0111\\u1ED9 3 (Nguy hi\\u1EC3m)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-blue-500 underline\",\n            children: \"Xem g\\u1EE3i \\xFD \\u0111\\xE1nh gi\\xE1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-primary w-full\",\n          onClick: () => {\n            setShowWeightTable(true);\n          },\n          children: \"Thi\\u1EBFt l\\u1EADp tr\\u1ECDng s\\u1ED1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), showWeightTable && /*#__PURE__*/_jsxDEV(WeightTableEpidemic, {\n          data: weight,\n          func: closeDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 31\n        }, this), !showResetData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-primary w-full mt-4\",\n          onClick: Clust,\n          children: \"Ph\\xE2n c\\u1EE5m\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-success w-full mt-4\",\n          onClick: resetData,\n          children: \"Reset d\\u1EEF li\\u1EC7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-success w-full mt-4\",\n          onClick: downloadFile,\n          children: \"Download d\\u1EEF li\\u1EC7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: /*#__PURE__*/_jsxDEV(EpidemicTable_New, {\n        weightData: weight,\n        isShowWeight: isShowWeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n}\n_s(EpidemicAnalyse_New, \"j1XHVoLAc6uMWps59h3i+geuCx8=\", false, function () {\n  return [useNavigate, useSelector, useDispatch];\n});\n_c = EpidemicAnalyse_New;\nexport default EpidemicAnalyse_New;\nvar _c;\n$RefreshReg$(_c, \"EpidemicAnalyse_New\");","map":{"version":3,"names":["useState","useEffect","MainFrame","useNavigate","PATH","getPandemicDataAPI","getEpidemicDataOfAllProvincesAPI","clusterAPI","Dropdown","province","MyDatePicker","useSelector","useDispatch","changeEpidemicDataAnalyse","sortWithLevel","resetAllLevel","enebleLoadingScreen","disableLoadingScreen","XLSX","saveAs","EpidemicTable_New","WeightTableEpidemic","jsxDEV","_jsxDEV","EpidemicAnalyse_New","_s","navigate","EpidemicData","state","epidemicDataAnalyse","data","dispatch","pandemicData","setPandemicData","pandemicSelect","setPandemicSelect","dateSelect","setDateSelect","showTip","setShowTip","isLoading","setIsLoading","showWeightTable","setShowWeightTable","weight","setWeight","isShowWeight","setIsShowWeight","showResetData","setShowResetData","weightList","setWeightList","infection_new","infection_average","infection_total","recovered_new","recovered_average","recovered_total","death_new","death_average","death_total","population","population_density","weightLabel","changePandemic","option","find","e","pandemic_name","pandemic_id","changeDate","date","changeIsShowWeight","event","target","checked","closeDialog","weightListTmp","forEach","index","Clust","U","map","province_id","province_name","level","C","tagField","keys","then","cluster_label","catch","error","console","resetData","downloadFile","currentTime","Date","getTime","fileName","workbook","utils","book_new","worksheet","json_to_sheet","book_append_sheet","excelBuffer","write","bookType","type","blob","Blob","localStorage","getItem","HOME","fetchData","pandemicDataSrevice","log","res","dt","infectionLst","infection","list","recoveredLst","recovered","deathLst","death","length","quantity_in_today","total_quantity","parseFloat","toFixed","children","_jsxFileName","lineNumber","columnNumber","className","func","onChange","onClick","weightData","_c","$RefreshReg$"],"sources":["D:/Don't Click Here/2022_2/code_2/client/src/components/subscreen/expert/EpidemicAnalyse_New.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport MainFrame from '../../mainframe/MainFrame'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { PATH } from '../../../constant/constant';\r\nimport { getPandemicDataAPI, getEpidemicDataOfAllProvincesAPI, clusterAPI } from '../../../service/userService'\r\nimport Dropdown from '../../dropdown/Dropdown';\r\nimport province from '../../../constant/province'\r\nimport MyDatePicker from '../../datepicker/DatePicker';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeEpidemicDataAnalyse, sortWithLevel, resetAllLevel } from '../../../store/reducer/epidemicDataAnalyseSlice';\r\nimport { enebleLoadingScreen, disableLoadingScreen } from '../../../store/reducer/showLoadingScreenSlice';\r\n\r\n// Excel\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport EpidemicTable_New from './epidemictable/EpidemicTable_New';\r\n// import S_SMC_FCM from '../../../logic/sSMC_FCM';\r\nimport WeightTableEpidemic from './epidemictable/WeightTableEpidemic';\r\n\r\nfunction EpidemicAnalyse_New() {\r\n  const navigate = useNavigate();\r\n  const EpidemicData = useSelector((state) => state.epidemicDataAnalyse.data);\r\n  const dispatch = useDispatch();\r\n\r\n  const [pandemicData, setPandemicData] = useState([]);\r\n  \r\n  const [pandemicSelect, setPandemicSelect] = useState(0);\r\n  const [dateSelect, setDateSelect] = useState(\"2023-07-15\");\r\n\r\n  const [showTip, setShowTip] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showWeightTable, setShowWeightTable] = useState(false);\r\n  const [weight, setWeight] = useState([0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]);\r\n  const [isShowWeight, setIsShowWeight] = useState(false);\r\n  const [showResetData, setShowResetData] = useState(false);\r\n  const [weightList, setWeightList] = useState({\r\n    infection_new: 1,\r\n    infection_average: 1,\r\n    infection_total: 1,\r\n    recovered_new: 1,\r\n    recovered_average: 1,\r\n    recovered_total: 1,\r\n    death_new: 1,\r\n    death_average: 1,\r\n    death_total: 1,\r\n    population: 1,\r\n    population_density: 1,\r\n  });\r\n\r\n  const weightLabel = [\r\n    'infection_new',\r\n    'infection_average',\r\n    'infection_total',\r\n    'recovered_new',\r\n    'recovered_average',\r\n    'recovered_total',\r\n    'death_new',\r\n    'death_average',\r\n    'death_total',\r\n    'population',\r\n    'population_density',\r\n  ]\r\n\r\n  const changePandemic = (option)=>{\r\n    // console.log('pandemic', pandemicData);\r\n    setPandemicSelect(pandemicData.find(e=>e.pandemic_name==option).pandemic_id)\r\n  }\r\n\r\n  const changeDate = (date) => {\r\n    setDateSelect(date);\r\n  }\r\n\r\n  const changeIsShowWeight = (event) => {\r\n    setIsShowWeight(event.target.checked);\r\n  }\r\n\r\n  const closeDialog = (data)=>{\r\n    if(data){\r\n      setWeight(data);\r\n      let weightListTmp = weightList;\r\n      weightLabel.forEach((e, index)=>{\r\n        weightListTmp[e] = data[index];\r\n      });\r\n      setWeightList(weightListTmp);\r\n      // console.log(weightList);\r\n    }\r\n    setShowWeightTable(false);\r\n  }\r\n\r\n  const Clust = async () => {\r\n    let U = EpidemicData.map(e=>{\r\n      return {\r\n        \"province_id\": e.province_id,\r\n        \"province_name\": e.province_name,\r\n        \"population\": (e.population)/1000000,\r\n        \"population_density\": e.population_density,\r\n        \"level\": e.level,\r\n        \"infection_new\": e.infection_new,\r\n        \"infection_total\": e.infection_total,\r\n        \"infection_average\": e.infection_average,\r\n        \"recovered_new\": e.recovered_new,\r\n        \"recovered_total\": e.recovered_total,\r\n        \"recovered_average\": e.recovered_average,\r\n        \"death_new\": e.death_new,\r\n        \"death_total\": e.death_total,\r\n        \"death_average\": e.death_average,\r\n      }\r\n    });\r\n    // console.log(U, weightList);\r\n    const C = [1, 2, 3]; // Danh sách các nhãn cần phân cụm\r\n    \r\n    const tagField = 'level'; // Trường dữ liệu chứa nhãn\r\n    \r\n    const keys = ['province_name', 'province_id']; // Các trường dữ liệu không tham gia vào việc phân cụm\r\n    \r\n    dispatch(enebleLoadingScreen());\r\n    clusterAPI(U, C, tagField, keys, weightList)\r\n      .then(data => {\r\n        // console.log(data);\r\n        dispatch(changeEpidemicDataAnalyse({data: data.map(e=>{\r\n          return {\r\n            \"province_id\": e.province_id,\r\n            \"province_name\": e.province_name,\r\n            \"population\": (e.population)*1000000,\r\n            \"population_density\": e.population_density,\r\n            \"level\": e.cluster_label,\r\n            \"infection_new\": e.infection_new,\r\n            \"infection_total\": e.infection_total,\r\n            \"infection_average\": e.infection_average,\r\n            \"recovered_new\": e.recovered_new,\r\n            \"recovered_total\": e.recovered_total,\r\n            \"recovered_average\": e.recovered_average,\r\n            \"death_new\": e.death_new,\r\n            \"death_total\": e.death_total,\r\n            \"death_average\": e.death_average,\r\n          }\r\n        })}))\r\n        dispatch(sortWithLevel());\r\n        dispatch(disableLoadingScreen());\r\n        setShowResetData(true);\r\n      })\r\n      .catch(error => {\r\n        console.error('Đã xảy ra lỗi:', error);\r\n      });\r\n  }\r\n\r\n  const resetData = () => {\r\n    dispatch(resetAllLevel());\r\n    setShowResetData(false);\r\n  }\r\n\r\n  const downloadFile = () => {\r\n    const currentTime = new Date().getTime();\r\n    const fileName = `EpidemicAnalyse_${currentTime}.xlsx`;\r\n    // Tạo workbook mới\r\n    const workbook = XLSX.utils.book_new();\r\n\r\n    // Convert data to worksheet format\r\n    const worksheet = XLSX.utils.json_to_sheet(EpidemicData.map(e=>{\r\n      return {\r\n        province_id: e.province_id,\r\n        province_name: e.province_name,\r\n        pandemic_id: pandemicData[pandemicSelect].pandemic_id,\r\n        pandemic_name: pandemicData[pandemicSelect].pandemic_name,\r\n        date: dateSelect,\r\n        level: e.level\r\n      }\r\n    }));\r\n    // console.log(fileName, workbook, worksheet);\r\n    // Append worksheet to workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n    // Write workbook to Excel file\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\r\n    // Create a Blob from the buffer\r\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    // Download the file\r\n    saveAs(blob, fileName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem('role') != 1){\r\n      navigate(PATH.HOME);\r\n    }\r\n    const fetchData = async () => {\r\n      try {\r\n        const pandemicDataSrevice = await getPandemicDataAPI();\r\n        setPandemicData(pandemicDataSrevice);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getEpidemicDataOfAllProvincesAPI(pandemicSelect, dateSelect);\r\n        data.forEach(e=>{\r\n          if(!e.level){\r\n            e.level = 0;\r\n          }\r\n        })\r\n        // console.log(data);\r\n        const res = data.map(dt=>{\r\n          const infectionLst = dt.infection.list;\r\n          const recoveredLst = dt.recovered.list;\r\n          const deathLst = dt.death.list;\r\n          let infection_average = 0, recovered_average = 0, death_average = 0, \r\n          infection_new = 0, infection_total = 0, \r\n          recovered_new = 0, recovered_total = 0,\r\n          death_new = 0, death_total = 0;\r\n          \r\n          if(infectionLst.length){\r\n            infectionLst.forEach(e=>{\r\n              infection_average += e.quantity_in_today;\r\n            });\r\n            infection_new = infectionLst[infectionLst.length-1].quantity_in_today;\r\n            infection_total = infectionLst[infectionLst.length-1].total_quantity;\r\n            infection_average = parseFloat((infection_average/(infectionLst.length)).toFixed(2));\r\n          } else {\r\n            infection_new = -1;\r\n            infection_total = -1;\r\n            infection_average = -1;\r\n          }\r\n          if(recoveredLst.length){\r\n            recoveredLst.forEach(e=>{\r\n              recovered_average += e.quantity_in_today;\r\n            });\r\n            recovered_new = recoveredLst[recoveredLst.length-1].quantity_in_today;\r\n            recovered_total = recoveredLst[recoveredLst.length-1].total_quantity;\r\n            recovered_average = parseFloat((recovered_average/(recoveredLst.length)).toFixed(2));\r\n          } else {\r\n            recovered_new = -1;\r\n            recovered_total = -1;\r\n            recovered_average = -1;\r\n          }\r\n          if(deathLst.length){\r\n            deathLst.forEach(e=>{\r\n              death_average += e.quantity_in_today;\r\n            });\r\n            death_new = deathLst[deathLst.length-1].quantity_in_today;\r\n            death_total = deathLst[deathLst.length-1].total_quantity;\r\n            death_average = parseFloat((death_average/(deathLst.length)).toFixed(2));\r\n          } else {\r\n            death_new = -1;\r\n            death_total = -1;\r\n            death_average = -1;\r\n          }\r\n          \r\n          return {\r\n            province_id: dt.province_id,\r\n            province_name: province[dt.province_id-1],\r\n            population: dt.population,\r\n            population_density: dt.population_density,\r\n            level: dt.level,\r\n            infection_new: infection_new,\r\n            infection_total: infection_total,\r\n            infection_average: infection_average,\r\n            recovered_new: recovered_new,\r\n            recovered_total: recovered_total,\r\n            recovered_average: recovered_average,\r\n            death_new: death_new,\r\n            death_total: death_total,\r\n            death_average: death_average,\r\n          }\r\n        });\r\n        console.log('res', res);\r\n        dispatch(changeEpidemicDataAnalyse({data: res}))\r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pandemicSelect, dateSelect]);\r\n\r\n\r\n  return (\r\n    <MainFrame>\r\n      <h1>Phân tích tình hình dịch bệnh</h1>\r\n      <div className=\"grid grid-cols-3 gap-4 mt-5\">\r\n        <div className=\"col-span-1\">\r\n          <Dropdown data={pandemicData.map(e=>e.pandemic_name)} func={changePandemic}/>\r\n          <MyDatePicker func={changeDate}/>\r\n          <div className=\"w-full mt-4\">\r\n            <label className='text-lg flex items-center'>\r\n              <input className='h-6 w-6' type=\"checkbox\" checked={isShowWeight} onChange={changeIsShowWeight} />\r\n              <span className='ml-1'>Xem trọng số</span>\r\n            </label>\r\n          </div>\r\n          <div className=\"mt-4 cursor-pointer\" onClick={()=>{setShowTip(!showTip)}}>\r\n            {showTip ? \r\n            <div className=\" text-green-900\">\r\n              Việc đánh giá cấp độ dịch có thể tham khảo công thức sau: \r\n              <br />Giá trị đánh giá = α * (Hồi phục)/(Nhiễm * Tử vong * Mật độ dân số). \r\n              <br />Với α là hệ số do chuyên viên quyết định. \r\n              <br />Nếu Giá trị đánh giá &lt; 0.1 thì sẽ được coi là cấp độ 1 (An toàn)\r\n              <br />Nếu 0.1 &lt; Giá trị đánh giá &lt; 0.15 thì sẽ được coi là cấp độ 2 (Chú ý)\r\n              <br />Nếu Giá trị đánh giá &gt; 0.15 thì sẽ được coi là cấp độ 3 (Nguy hiểm)\r\n            </div> : <div className=\"text-blue-500 underline\">Xem gợi ý đánh giá</div>}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-span-1\"></div>\r\n        <div className=\"col-span-1\">\r\n          <div className=\"btn btn-primary w-full\" onClick={()=>{setShowWeightTable(true)}}>Thiết lập trọng số</div>\r\n          {showWeightTable && <WeightTableEpidemic data={weight} func={closeDialog}/>}\r\n          {!showResetData ? \r\n            <div className=\"btn btn-primary w-full mt-4\" onClick={Clust}>Phân cụm</div>\r\n            :\r\n            <div className=\"btn btn-success w-full mt-4\" onClick={resetData}>Reset dữ liệu</div>\r\n          }\r\n          <div className=\"btn btn-success w-full mt-4\" onClick={downloadFile}>Download dữ liệu</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-5\">\r\n        <EpidemicTable_New weightData={weight} isShowWeight={isShowWeight} />\r\n\r\n      </div>\r\n    </MainFrame>\r\n  )\r\n}\r\n\r\nexport default EpidemicAnalyse_New"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}