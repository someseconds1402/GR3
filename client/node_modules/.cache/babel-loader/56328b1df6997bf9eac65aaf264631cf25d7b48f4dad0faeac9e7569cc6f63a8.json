{"ast":null,"code":"import _regeneratorRuntime from\"D:/Don't Click Here/2022_2/code_2/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Don't Click Here/2022_2/code_2/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"D:/Don't Click Here/2022_2/code_2/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from'react';import MainFrame from'../../mainframe/MainFrame';import{useNavigate}from'react-router-dom';import{PATH}from'../../../constant/constant';import{getPandemicDataAPI,getEpidemicDataOfAllProvincesAPI,clusterAPI}from'../../../service/userService';import Dropdown from'../../dropdown/Dropdown';import province from'../../../constant/province';import MyDatePicker from'../../datepicker/DatePicker';import{useSelector,useDispatch}from'react-redux';import{changeEpidemicDataAnalyse,sortWithLevel,resetAllLevel}from'../../../store/reducer/epidemicDataAnalyseSlice';import{enebleLoadingScreen,disableLoadingScreen}from'../../../store/reducer/showLoadingScreenSlice';// Excel\nimport*as XLSX from'xlsx';import{saveAs}from'file-saver';import EpidemicTable_New from'./epidemictable/EpidemicTable_New';// import S_SMC_FCM from '../../../logic/sSMC_FCM';\nimport WeightTableEpidemic from'./epidemictable/WeightTableEpidemic';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function EpidemicAnalyse_New(){var navigate=useNavigate();var EpidemicData=useSelector(function(state){return state.epidemicDataAnalyse.data;});var dispatch=useDispatch();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),pandemicData=_useState2[0],setPandemicData=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),pandemicSelect=_useState4[0],setPandemicSelect=_useState4[1];var _useState5=useState(\"2022-07-15\"),_useState6=_slicedToArray(_useState5,2),dateSelect=_useState6[0],setDateSelect=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),showTip=_useState8[0],setShowTip=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isLoading=_useState10[0],setIsLoading=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),showWeightTable=_useState12[0],setShowWeightTable=_useState12[1];var _useState13=useState([0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]),_useState14=_slicedToArray(_useState13,2),weight=_useState14[0],setWeight=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),isShowWeight=_useState16[0],setIsShowWeight=_useState16[1];var _useState17=useState({infection_new:1,infection_average:1,infection_total:1,recovered_new:1,recovered_average:1,recovered_total:1,death_new:1,death_average:1,death_total:1,population:1,population_density:1}),_useState18=_slicedToArray(_useState17,2),weightList=_useState18[0],setWeightList=_useState18[1];var weightLabel=['infection_new','infection_average','infection_total','recovered_new','recovered_average','recovered_total','death_new','death_average','death_total','population','population_density'];var changePandemic=function changePandemic(option){// console.log('pandemic', pandemicData);\nsetPandemicSelect(2);};var changeDate=function changeDate(date){setDateSelect(date);};var changeIsShowWeight=function changeIsShowWeight(event){setIsShowWeight(event.target.checked);};var closeDialog=function closeDialog(data){if(data){setWeight(data);var weightListTmp=weightList;weightLabel.forEach(function(e,index){weightListTmp[e]=data[index];});setWeightList(weightListTmp);// console.log(weightList);\n}setShowWeightTable(false);};var Clust=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var U,C,tagField,keys;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:U=EpidemicData.map(function(e){return{\"province_id\":e.province_id,\"province_name\":e.province_name,\"population\":e.population/1000000,\"population_density\":e.population_density,\"level\":e.level,\"infection_new\":e.infection_new,\"infection_total\":e.infection_total,\"infection_average\":e.infection_average,\"recovered_new\":e.recovered_new,\"recovered_total\":e.recovered_total,\"recovered_average\":e.recovered_average,\"death_new\":e.death_new,\"death_total\":e.death_total,\"death_average\":e.death_average};});// console.log(U, weightList);\nC=[1,2,3];// Danh sách các nhãn cần phân cụm\ntagField='level';// Trường dữ liệu chứa nhãn\nkeys=['province_name','province_id'];// Các trường dữ liệu không tham gia vào việc phân cụm\ndispatch(enebleLoadingScreen());clusterAPI(U,C,tagField,keys,weightList).then(function(data){// console.log(data);\ndispatch(changeEpidemicDataAnalyse({data:data.map(function(e){return{\"province_id\":e.province_id,\"province_name\":e.province_name,\"population\":e.population*1000000,\"population_density\":e.population_density,\"level\":e.cluster_label,\"infection_new\":e.infection_new,\"infection_total\":e.infection_total,\"infection_average\":e.infection_average,\"recovered_new\":e.recovered_new,\"recovered_total\":e.recovered_total,\"recovered_average\":e.recovered_average,\"death_new\":e.death_new,\"death_total\":e.death_total,\"death_average\":e.death_average};})}));dispatch(sortWithLevel());dispatch(disableLoadingScreen());}).catch(function(error){console.error('Đã xảy ra lỗi:',error);});case 6:case\"end\":return _context.stop();}},_callee);}));return function Clust(){return _ref.apply(this,arguments);};}();var downloadFile=function downloadFile(){var currentTime=new Date().getTime();var fileName=\"\".concat(currentTime,\"_EpidemicAnalyse.xlsx\");// Tạo workbook mới\nvar workbook=XLSX.utils.book_new();// Convert data to worksheet format\nvar worksheet=XLSX.utils.json_to_sheet(EpidemicData);// console.log(fileName, workbook, worksheet);\n// Append worksheet to workbook\nXLSX.utils.book_append_sheet(workbook,worksheet,'Data');// Write workbook to Excel file\nvar excelBuffer=XLSX.write(workbook,{bookType:'xlsx',type:'buffer'});// Create a Blob from the buffer\nvar blob=new Blob([excelBuffer],{type:'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});// Download the file\nsaveAs(blob,fileName);};useEffect(function(){if(localStorage.getItem('role')!=1){navigate(PATH.HOME);}var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var pandemicDataSrevice;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return getPandemicDataAPI();case 3:pandemicDataSrevice=_context2.sent;setPandemicData(pandemicDataSrevice);_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 10:case\"end\":return _context2.stop();}},_callee2,null,[[0,7]]);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();},[]);useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var data,res;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return getEpidemicDataOfAllProvincesAPI(pandemicSelect,dateSelect);case 3:data=_context3.sent;data.forEach(function(e){if(!e.level){e.level=0;}});res=data.map(function(dt){var infectionLst=dt.infection.list;var recoveredLst=dt.recovered.list;var deathLst=dt.death.list;var infectionAverage=0;var recoveredAverage=0;var deathAverage=0;infectionLst.forEach(function(e){infectionAverage+=e.quantity_in_today;});recoveredLst.forEach(function(e){recoveredAverage+=e.quantity_in_today;});deathLst.forEach(function(e){deathAverage+=e.quantity_in_today;});return{province_id:dt.province_id,province_name:province[dt.province_id-1],population:dt.population,population_density:dt.population_density,level:dt.level,infection_new:infectionLst[infectionLst.length-1].quantity_in_today,infection_total:infectionLst[infectionLst.length-1].total_quantity,infection_average:parseFloat((infectionAverage/infectionLst.length).toFixed(2)),recovered_new:recoveredLst[recoveredLst.length-1].quantity_in_today,recovered_total:recoveredLst[recoveredLst.length-1].total_quantity,recovered_average:parseFloat((recoveredAverage/recoveredLst.length).toFixed(2)),death_new:deathLst[deathLst.length-1].quantity_in_today,death_total:deathLst[deathLst.length-1].total_quantity,death_average:parseFloat((deathAverage/deathLst.length).toFixed(2))};});dispatch(changeEpidemicDataAnalyse({data:res}));_context3.next=12;break;case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);case 12:case\"end\":return _context3.stop();}},_callee3,null,[[0,9]]);}));return function fetchData(){return _ref3.apply(this,arguments);};}();fetchData();},[pandemicSelect,dateSelect]);return/*#__PURE__*/_jsxs(MainFrame,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Ph\\xE2n t\\xEDch t\\xECnh h\\xECnh d\\u1ECBch b\\u1EC7nh\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-3 gap-4 mt-5\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-span-1\",children:[/*#__PURE__*/_jsx(Dropdown,{data:pandemicData.map(function(e){return e.pandemic_name;}),func:changePandemic}),/*#__PURE__*/_jsx(MyDatePicker,{func:changeDate}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full mt-4\",children:/*#__PURE__*/_jsxs(\"label\",{className:\"text-lg flex items-center\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"h-6 w-6\",type:\"checkbox\",checked:isShowWeight,onChange:changeIsShowWeight}),/*#__PURE__*/_jsx(\"span\",{className:\"ml-1\",children:\"Xem tr\\u1ECDng s\\u1ED1\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 cursor-pointer\",onClick:function onClick(){setShowTip(!showTip);},children:showTip?/*#__PURE__*/_jsxs(\"div\",{className:\" text-green-900\",children:[\"Vi\\u1EC7c \\u0111\\xE1nh gi\\xE1 c\\u1EA5p \\u0111\\u1ED9 d\\u1ECBch c\\xF3 th\\u1EC3 tham kh\\u1EA3o c\\xF4ng th\\u1EE9c sau:\",/*#__PURE__*/_jsx(\"br\",{}),\"Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 = \\u03B1 * (H\\u1ED3i ph\\u1EE5c)/(Nhi\\u1EC5m * T\\u1EED vong * M\\u1EADt \\u0111\\u1ED9 d\\xE2n s\\u1ED1).\",/*#__PURE__*/_jsx(\"br\",{}),\"V\\u1EDBi \\u03B1 l\\xE0 h\\u1EC7 s\\u1ED1 do chuy\\xEAn vi\\xEAn quy\\u1EBFt \\u0111\\u1ECBnh.\",/*#__PURE__*/_jsx(\"br\",{}),\"N\\u1EBFu Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 < 0.1 th\\xEC s\\u1EBD \\u0111\\u01B0\\u1EE3c coi l\\xE0 c\\u1EA5p \\u0111\\u1ED9 1 (An to\\xE0n)\",/*#__PURE__*/_jsx(\"br\",{}),\"N\\u1EBFu 0.1 < Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 < 0.15 th\\xEC s\\u1EBD \\u0111\\u01B0\\u1EE3c coi l\\xE0 c\\u1EA5p \\u0111\\u1ED9 2 (Ch\\xFA \\xFD)\",/*#__PURE__*/_jsx(\"br\",{}),\"N\\u1EBFu Gi\\xE1 tr\\u1ECB \\u0111\\xE1nh gi\\xE1 > 0.15 th\\xEC s\\u1EBD \\u0111\\u01B0\\u1EE3c coi l\\xE0 c\\u1EA5p \\u0111\\u1ED9 3 (Nguy hi\\u1EC3m)\"]}):/*#__PURE__*/_jsx(\"div\",{className:\"text-blue-500 underline\",children:\"Xem g\\u1EE3i \\xFD \\u0111\\xE1nh gi\\xE1\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"col-span-1\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-span-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"btn btn-primary w-full\",onClick:function onClick(){setShowWeightTable(true);},children:\"Thi\\u1EBFt l\\u1EADp tr\\u1ECDng s\\u1ED1\"}),showWeightTable&&/*#__PURE__*/_jsx(WeightTableEpidemic,{data:weight,func:closeDialog}),/*#__PURE__*/_jsx(\"div\",{className:\"btn btn-primary w-full mt-4\",onClick:Clust,children:\"Ph\\xE2n c\\u1EE5m\"}),/*#__PURE__*/_jsx(\"div\",{className:\"btn btn-success w-full mt-4\",onClick:downloadFile,children:\"Download d\\u1EEF li\\u1EC7u\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-5\",children:/*#__PURE__*/_jsx(EpidemicTable_New,{weightData:weight,isShowWeight:isShowWeight})})]});}export default EpidemicAnalyse_New;","map":{"version":3,"names":["useState","useEffect","MainFrame","useNavigate","PATH","getPandemicDataAPI","getEpidemicDataOfAllProvincesAPI","clusterAPI","Dropdown","province","MyDatePicker","useSelector","useDispatch","changeEpidemicDataAnalyse","sortWithLevel","resetAllLevel","enebleLoadingScreen","disableLoadingScreen","XLSX","saveAs","EpidemicTable_New","WeightTableEpidemic","jsx","_jsx","jsxs","_jsxs","EpidemicAnalyse_New","navigate","EpidemicData","state","epidemicDataAnalyse","data","dispatch","_useState","_useState2","_slicedToArray","pandemicData","setPandemicData","_useState3","_useState4","pandemicSelect","setPandemicSelect","_useState5","_useState6","dateSelect","setDateSelect","_useState7","_useState8","showTip","setShowTip","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","showWeightTable","setShowWeightTable","_useState13","_useState14","weight","setWeight","_useState15","_useState16","isShowWeight","setIsShowWeight","_useState17","infection_new","infection_average","infection_total","recovered_new","recovered_average","recovered_total","death_new","death_average","death_total","population","population_density","_useState18","weightList","setWeightList","weightLabel","changePandemic","option","changeDate","date","changeIsShowWeight","event","target","checked","closeDialog","weightListTmp","forEach","e","index","Clust","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","U","C","tagField","keys","wrap","_callee$","_context","prev","next","map","province_id","province_name","level","then","cluster_label","catch","error","console","stop","apply","arguments","downloadFile","currentTime","Date","getTime","fileName","concat","workbook","utils","book_new","worksheet","json_to_sheet","book_append_sheet","excelBuffer","write","bookType","type","blob","Blob","localStorage","getItem","HOME","fetchData","_ref2","_callee2","pandemicDataSrevice","_callee2$","_context2","sent","t0","log","_ref3","_callee3","res","_callee3$","_context3","dt","infectionLst","infection","list","recoveredLst","recovered","deathLst","death","infectionAverage","recoveredAverage","deathAverage","quantity_in_today","length","total_quantity","parseFloat","toFixed","children","className","pandemic_name","func","onChange","onClick","weightData"],"sources":["D:/Don't Click Here/2022_2/code_2/client/src/components/subscreen/expert/EpidemicAnalyse_New.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport MainFrame from '../../mainframe/MainFrame'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { PATH } from '../../../constant/constant';\r\nimport { getPandemicDataAPI, getEpidemicDataOfAllProvincesAPI, clusterAPI } from '../../../service/userService'\r\nimport Dropdown from '../../dropdown/Dropdown';\r\nimport province from '../../../constant/province'\r\nimport MyDatePicker from '../../datepicker/DatePicker';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeEpidemicDataAnalyse, sortWithLevel, resetAllLevel } from '../../../store/reducer/epidemicDataAnalyseSlice';\r\nimport { enebleLoadingScreen, disableLoadingScreen } from '../../../store/reducer/showLoadingScreenSlice';\r\n\r\n// Excel\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport EpidemicTable_New from './epidemictable/EpidemicTable_New';\r\n// import S_SMC_FCM from '../../../logic/sSMC_FCM';\r\nimport WeightTableEpidemic from './epidemictable/WeightTableEpidemic';\r\n\r\nfunction EpidemicAnalyse_New() {\r\n  const navigate = useNavigate();\r\n  const EpidemicData = useSelector((state) => state.epidemicDataAnalyse.data);\r\n  const dispatch = useDispatch();\r\n\r\n  const [pandemicData, setPandemicData] = useState([]);\r\n  \r\n  const [pandemicSelect, setPandemicSelect] = useState(1);\r\n  const [dateSelect, setDateSelect] = useState(\"2022-07-15\");\r\n\r\n  const [showTip, setShowTip] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showWeightTable, setShowWeightTable] = useState(false);\r\n  const [weight, setWeight] = useState([0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1]);\r\n  const [isShowWeight, setIsShowWeight] = useState(false);\r\n  const [weightList, setWeightList] = useState({\r\n    infection_new: 1,\r\n    infection_average: 1,\r\n    infection_total: 1,\r\n    recovered_new: 1,\r\n    recovered_average: 1,\r\n    recovered_total: 1,\r\n    death_new: 1,\r\n    death_average: 1,\r\n    death_total: 1,\r\n    population: 1,\r\n    population_density: 1,\r\n  });\r\n\r\n  const weightLabel = [\r\n    'infection_new',\r\n    'infection_average',\r\n    'infection_total',\r\n    'recovered_new',\r\n    'recovered_average',\r\n    'recovered_total',\r\n    'death_new',\r\n    'death_average',\r\n    'death_total',\r\n    'population',\r\n    'population_density',\r\n  ]\r\n\r\n  const changePandemic = (option)=>{\r\n    // console.log('pandemic', pandemicData);\r\n    setPandemicSelect(2)\r\n  }\r\n\r\n  const changeDate = (date) => {\r\n    setDateSelect(date);\r\n  }\r\n\r\n  const changeIsShowWeight = (event) => {\r\n    setIsShowWeight(event.target.checked);\r\n  }\r\n\r\n  const closeDialog = (data)=>{\r\n    if(data){\r\n      setWeight(data);\r\n      let weightListTmp = weightList;\r\n      weightLabel.forEach((e, index)=>{\r\n        weightListTmp[e] = data[index];\r\n      });\r\n      setWeightList(weightListTmp);\r\n      // console.log(weightList);\r\n    }\r\n    setShowWeightTable(false);\r\n  }\r\n\r\n  const Clust = async () => {\r\n    let U = EpidemicData.map(e=>{\r\n      return {\r\n        \"province_id\": e.province_id,\r\n        \"province_name\": e.province_name,\r\n        \"population\": (e.population)/1000000,\r\n        \"population_density\": e.population_density,\r\n        \"level\": e.level,\r\n        \"infection_new\": e.infection_new,\r\n        \"infection_total\": e.infection_total,\r\n        \"infection_average\": e.infection_average,\r\n        \"recovered_new\": e.recovered_new,\r\n        \"recovered_total\": e.recovered_total,\r\n        \"recovered_average\": e.recovered_average,\r\n        \"death_new\": e.death_new,\r\n        \"death_total\": e.death_total,\r\n        \"death_average\": e.death_average,\r\n      }\r\n    });\r\n    // console.log(U, weightList);\r\n    const C = [1, 2, 3]; // Danh sách các nhãn cần phân cụm\r\n    \r\n    const tagField = 'level'; // Trường dữ liệu chứa nhãn\r\n    \r\n    const keys = ['province_name', 'province_id']; // Các trường dữ liệu không tham gia vào việc phân cụm\r\n    \r\n    dispatch(enebleLoadingScreen());\r\n    clusterAPI(U, C, tagField, keys, weightList)\r\n      .then(data => {\r\n        // console.log(data);\r\n        dispatch(changeEpidemicDataAnalyse({data: data.map(e=>{\r\n          return {\r\n            \"province_id\": e.province_id,\r\n            \"province_name\": e.province_name,\r\n            \"population\": (e.population)*1000000,\r\n            \"population_density\": e.population_density,\r\n            \"level\": e.cluster_label,\r\n            \"infection_new\": e.infection_new,\r\n            \"infection_total\": e.infection_total,\r\n            \"infection_average\": e.infection_average,\r\n            \"recovered_new\": e.recovered_new,\r\n            \"recovered_total\": e.recovered_total,\r\n            \"recovered_average\": e.recovered_average,\r\n            \"death_new\": e.death_new,\r\n            \"death_total\": e.death_total,\r\n            \"death_average\": e.death_average,\r\n          }\r\n        })}))\r\n        dispatch(sortWithLevel());\r\n        dispatch(disableLoadingScreen());\r\n      })\r\n      .catch(error => {\r\n        console.error('Đã xảy ra lỗi:', error);\r\n      });\r\n  }\r\n\r\n  const downloadFile = () => {\r\n    const currentTime = new Date().getTime();\r\n    const fileName = `${currentTime}_EpidemicAnalyse.xlsx`;\r\n    // Tạo workbook mới\r\n    const workbook = XLSX.utils.book_new();\r\n\r\n    // Convert data to worksheet format\r\n    const worksheet = XLSX.utils.json_to_sheet(EpidemicData);\r\n    // console.log(fileName, workbook, worksheet);\r\n    // Append worksheet to workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n    // Write workbook to Excel file\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\r\n    // Create a Blob from the buffer\r\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    // Download the file\r\n    saveAs(blob, fileName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem('role') != 1){\r\n      navigate(PATH.HOME);\r\n    }\r\n    const fetchData = async () => {\r\n      try {\r\n        const pandemicDataSrevice = await getPandemicDataAPI();\r\n        setPandemicData(pandemicDataSrevice);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getEpidemicDataOfAllProvincesAPI(pandemicSelect, dateSelect);\r\n        data.forEach(e=>{\r\n          if(!e.level){\r\n            e.level = 0;\r\n          }\r\n        })\r\n        const res = data.map(dt=>{\r\n          const infectionLst = dt.infection.list;\r\n          const recoveredLst = dt.recovered.list;\r\n          const deathLst = dt.death.list;\r\n          let infectionAverage = 0;\r\n          let recoveredAverage = 0;\r\n          let deathAverage = 0;\r\n    \r\n          infectionLst.forEach(e=>{\r\n            infectionAverage += e.quantity_in_today;\r\n          });\r\n          recoveredLst.forEach(e=>{\r\n            recoveredAverage += e.quantity_in_today;\r\n          });\r\n          deathLst.forEach(e=>{\r\n            deathAverage += e.quantity_in_today;\r\n          });\r\n    \r\n          return {\r\n            province_id: dt.province_id,\r\n            province_name: province[dt.province_id-1],\r\n            population: dt.population,\r\n            population_density: dt.population_density,\r\n            level: dt.level,\r\n            infection_new: infectionLst[infectionLst.length-1].quantity_in_today,\r\n            infection_total: infectionLst[infectionLst.length-1].total_quantity,\r\n            infection_average: parseFloat((infectionAverage/(infectionLst.length)).toFixed(2)),\r\n            recovered_new: recoveredLst[recoveredLst.length-1].quantity_in_today,\r\n            recovered_total: recoveredLst[recoveredLst.length-1].total_quantity,\r\n            recovered_average: parseFloat((recoveredAverage/(recoveredLst.length)).toFixed(2)),\r\n            death_new: deathLst[deathLst.length-1].quantity_in_today,\r\n            death_total: deathLst[deathLst.length-1].total_quantity,\r\n            death_average: parseFloat((deathAverage/(deathLst.length)).toFixed(2)),\r\n          }\r\n        });\r\n        dispatch(changeEpidemicDataAnalyse({data: res}))\r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pandemicSelect, dateSelect]);\r\n\r\n\r\n  return (\r\n    <MainFrame>\r\n      <h1>Phân tích tình hình dịch bệnh</h1>\r\n      <div className=\"grid grid-cols-3 gap-4 mt-5\">\r\n        <div className=\"col-span-1\">\r\n          <Dropdown data={pandemicData.map(e=>e.pandemic_name)} func={changePandemic}/>\r\n          <MyDatePicker func={changeDate}/>\r\n          <div className=\"w-full mt-4\">\r\n            <label className='text-lg flex items-center'>\r\n              <input className='h-6 w-6' type=\"checkbox\" checked={isShowWeight} onChange={changeIsShowWeight} />\r\n              <span className='ml-1'>Xem trọng số</span>\r\n            </label>\r\n          </div>\r\n          <div className=\"mt-4 cursor-pointer\" onClick={()=>{setShowTip(!showTip)}}>\r\n            {showTip ? \r\n            <div className=\" text-green-900\">\r\n              Việc đánh giá cấp độ dịch có thể tham khảo công thức sau: \r\n              <br />Giá trị đánh giá = α * (Hồi phục)/(Nhiễm * Tử vong * Mật độ dân số). \r\n              <br />Với α là hệ số do chuyên viên quyết định. \r\n              <br />Nếu Giá trị đánh giá &lt; 0.1 thì sẽ được coi là cấp độ 1 (An toàn)\r\n              <br />Nếu 0.1 &lt; Giá trị đánh giá &lt; 0.15 thì sẽ được coi là cấp độ 2 (Chú ý)\r\n              <br />Nếu Giá trị đánh giá &gt; 0.15 thì sẽ được coi là cấp độ 3 (Nguy hiểm)\r\n            </div> : <div className=\"text-blue-500 underline\">Xem gợi ý đánh giá</div>}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-span-1\"></div>\r\n        <div className=\"col-span-1\">\r\n          <div className=\"btn btn-primary w-full\" onClick={()=>{setShowWeightTable(true)}}>Thiết lập trọng số</div>\r\n          {showWeightTable && <WeightTableEpidemic data={weight} func={closeDialog}/>}\r\n          <div className=\"btn btn-primary w-full mt-4\" onClick={Clust}>Phân cụm</div>\r\n          <div className=\"btn btn-success w-full mt-4\" onClick={downloadFile}>Download dữ liệu</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-5\">\r\n        <EpidemicTable_New weightData={weight} isShowWeight={isShowWeight} />\r\n\r\n      </div>\r\n    </MainFrame>\r\n  )\r\n}\r\n\r\nexport default EpidemicAnalyse_New"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}