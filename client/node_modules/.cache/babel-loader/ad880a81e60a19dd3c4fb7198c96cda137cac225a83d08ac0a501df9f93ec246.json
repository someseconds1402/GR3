{"ast":null,"code":"var _jsxFileName = \"D:\\\\Don't Click Here\\\\2022_2\\\\code_2\\\\client\\\\src\\\\components\\\\subscreen\\\\expert\\\\EpidemicAnalyse_New.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport MainFrame from '../../mainframe/MainFrame';\nimport { useNavigate } from 'react-router-dom';\nimport { PATH } from '../../../constant/constant';\nimport { getPandemicDataAPI, getEpidemicDataOfAllProvincesAPI } from '../../../service/userService';\nimport Dropdown from '../../dropdown/Dropdown';\nimport province from '../../../constant/province';\nimport MyDatePicker from '../../datepicker/DatePicker';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeEpidemicDataAnalyse, sortWithLevel, resetAllLevel } from '../../../store/reducer/epidemicDataAnalyseSlice';\n\n// Excel\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport WeightTable from './epidemictable/WeightTable';\nimport EpidemicTable_New from './epidemictable/EpidemicTable_New';\nimport S_SMC_FCM from '../../../logic/sSMC_FCM';\nimport WeightTableEpidemic from './epidemictable/WeightTableEpidemic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EpidemicAnalyse_New() {\n  _s();\n  const navigate = useNavigate();\n  const EpidemicData = useSelector(state => state.epidemicDataAnalyse.data);\n  const dispatch = useDispatch();\n  const [pandemicData, setPandemicData] = useState([]);\n  const [pandemicSelect, setPandemicSelect] = useState(1);\n  const [dateSelect, setDateSelect] = useState(\"2022-07-15\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [showWeightTable, setShowWeightTable] = useState(false);\n  const [weight, setWeight] = useState([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n  const [isShowWeight, setIsShowWeight] = useState(false);\n  const [weightList, setWeightList] = useState({\n    infection_new: 1,\n    infection_average: 1,\n    infection_total: 1,\n    recovered_new: 1,\n    recovered_average: 1,\n    recovered_total: 1,\n    death_new: 1,\n    death_average: 1,\n    death_total: 1,\n    population: 1,\n    population_density: 1\n  });\n  const weightLabel = ['infection_new', 'infection_average', 'infection_total', 'recovered_new', 'recovered_average', 'recovered_total', 'death_new', 'death_average', 'death_total', 'population', 'population_density'];\n  const changePandemic = option => {\n    // console.log('pandemic', pandemicData);\n    setPandemicSelect(2);\n  };\n  const changeDate = date => {\n    setDateSelect(date);\n  };\n  const changeIsShowWeight = event => {\n    setIsShowWeight(event.target.checked);\n  };\n  const closeDialog = data => {\n    if (data) {\n      setWeight(data);\n      let weightListTmp = weightList;\n      weightLabel.forEach((e, index) => {\n        weightListTmp[e] = data[index];\n      });\n      setWeightList(weightListTmp);\n      // console.log(weightList);\n    }\n\n    setShowWeightTable(false);\n  };\n  const Clust = async () => {\n    let U = EpidemicData.map(e => {\n      return {\n        \"province_id\": e.province_id,\n        \"province_name\": e.province_name,\n        \"population\": e.population,\n        \"population_density\": e.population_density,\n        \"level\": e.level,\n        \"infection_new\": e.infection_new,\n        \"infection_total\": e.infection_total,\n        \"infection_average\": e.infection_average,\n        \"recovered_new\": e.recovered_new,\n        \"recovered_total\": e.recovered_total,\n        \"recovered_average\": e.recovered_average,\n        \"death_new\": e.death_new,\n        \"death_total\": e.death_total,\n        \"death_average\": e.death_average\n      };\n    });\n    // console.log(U, weightList);\n    const C = [1, 2, 3]; // Danh sách các nhãn cần phân cụm\n\n    const tagField = 'level'; // Trường dữ liệu chứa nhãn\n\n    const keys = ['province_name', 'province_id']; // Các trường dữ liệu không tham gia vào việc phân cụm\n\n    // Tạo một đối tượng thuật toán phân cụm\n    const algorithm = new S_SMC_FCM(U, C, tagField, keys, weightList);\n\n    // Chạy thuật toán\n    algorithm.run().then(() => {\n      // Khi thuật toán hoàn thành, lấy kết quả\n      const result = algorithm.X;\n      dispatch(changeEpidemicDataAnalyse({\n        data: result.map(e => {\n          return {\n            \"province_id\": e.province_id,\n            \"province_name\": e.province_name,\n            \"population\": e.population,\n            \"population_density\": e.population_density,\n            \"level\": e.cluster_label,\n            \"infection_new\": e.infection_new,\n            \"infection_total\": e.infection_total,\n            \"infection_average\": e.infection_average,\n            \"recovered_new\": e.recovered_new,\n            \"recovered_total\": e.recovered_total,\n            \"recovered_average\": e.recovered_average,\n            \"death_new\": e.death_new,\n            \"death_total\": e.death_total,\n            \"death_average\": e.death_average\n          };\n        })\n      }));\n      dispatch(sortWithLevel());\n      console.log(result);\n    }).catch(error => {\n      console.error('Đã xảy ra lỗi:', error);\n    });\n  };\n  const downloadFile = () => {\n    const currentTime = new Date().getTime();\n    const fileName = `${currentTime}_EpidemicAnalyse.xlsx`;\n    // Tạo workbook mới\n    const workbook = XLSX.utils.book_new();\n\n    // Convert data to worksheet format\n    const worksheet = XLSX.utils.json_to_sheet(EpidemicData);\n    // console.log(fileName, workbook, worksheet);\n    // Append worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\n    // Write workbook to Excel file\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'buffer'\n    });\n    // Create a Blob from the buffer\n    const blob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    // Download the file\n    saveAs(blob, fileName);\n  };\n  useEffect(() => {\n    if (localStorage.getItem('role') != 1) {\n      navigate(PATH.HOME);\n    }\n    const fetchData = async () => {\n      try {\n        const pandemicDataSrevice = await getPandemicDataAPI();\n        setPandemicData(pandemicDataSrevice);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getEpidemicDataOfAllProvincesAPI(pandemicSelect, dateSelect);\n        data.forEach(e => {\n          if (!e.level) {\n            e.level = 0;\n          }\n        });\n        const res = data.map(dt => {\n          const infectionLst = dt.infection.list;\n          const recoveredLst = dt.recovered.list;\n          const deathLst = dt.death.list;\n          let infectionAverage = 0;\n          let recoveredAverage = 0;\n          let deathAverage = 0;\n          infectionLst.forEach(e => {\n            infectionAverage += e.quantity_in_today;\n          });\n          recoveredLst.forEach(e => {\n            recoveredAverage += e.quantity_in_today;\n          });\n          deathLst.forEach(e => {\n            deathAverage += e.quantity_in_today;\n          });\n          return {\n            province_id: dt.province_id,\n            province_name: province[dt.province_id - 1],\n            population: dt.population,\n            population_density: dt.population_density,\n            level: dt.level,\n            infection_new: infectionLst[infectionLst.length - 1].quantity_in_today,\n            infection_total: infectionLst[infectionLst.length - 1].total_quantity,\n            infection_average: parseFloat((infectionAverage / infectionLst.length).toFixed(2)),\n            recovered_new: recoveredLst[recoveredLst.length - 1].quantity_in_today,\n            recovered_total: recoveredLst[recoveredLst.length - 1].total_quantity,\n            recovered_average: parseFloat((recoveredAverage / recoveredLst.length).toFixed(2)),\n            death_new: deathLst[deathLst.length - 1].quantity_in_today,\n            death_total: deathLst[deathLst.length - 1].total_quantity,\n            death_average: parseFloat((deathAverage / deathLst.length).toFixed(2))\n          };\n        });\n        dispatch(changeEpidemicDataAnalyse({\n          data: res\n        }));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, [pandemicSelect, dateSelect]);\n  return /*#__PURE__*/_jsxDEV(MainFrame, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ph\\xE2n t\\xEDch t\\xECnh h\\xECnh d\\u1ECBch b\\u1EC7nh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4 mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          data: pandemicData.map(e => e.pandemic_name),\n          func: changePandemic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyDatePicker, {\n          func: changeDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-lg flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"h-6 w-6\",\n              type: \"checkbox\",\n              checked: isShowWeight,\n              onChange: changeIsShowWeight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-1\",\n              children: \"Xem tr\\u1ECDng s\\u1ED1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-primary w-full\",\n          onClick: () => {\n            setShowWeightTable(true);\n          },\n          children: \"Thi\\u1EBFt l\\u1EADp tr\\u1ECDng s\\u1ED1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), showWeightTable && /*#__PURE__*/_jsxDEV(WeightTableEpidemic, {\n          data: weight,\n          func: closeDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-primary w-full mt-4\",\n          onClick: Clust,\n          children: \"Ph\\xE2n c\\u1EE5m\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn btn-success w-full mt-4\",\n          onClick: downloadFile,\n          children: \"Download d\\u1EEF li\\u1EC7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: /*#__PURE__*/_jsxDEV(EpidemicTable_New, {\n        weightData: weight,\n        isShowWeight: isShowWeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n_s(EpidemicAnalyse_New, \"/xCWvr0zJKDwKtv2yR+9fwf6gXc=\", false, function () {\n  return [useNavigate, useSelector, useDispatch];\n});\n_c = EpidemicAnalyse_New;\nexport default EpidemicAnalyse_New;\nvar _c;\n$RefreshReg$(_c, \"EpidemicAnalyse_New\");","map":{"version":3,"names":["useState","useEffect","MainFrame","useNavigate","PATH","getPandemicDataAPI","getEpidemicDataOfAllProvincesAPI","Dropdown","province","MyDatePicker","useSelector","useDispatch","changeEpidemicDataAnalyse","sortWithLevel","resetAllLevel","XLSX","saveAs","WeightTable","EpidemicTable_New","S_SMC_FCM","WeightTableEpidemic","jsxDEV","_jsxDEV","EpidemicAnalyse_New","_s","navigate","EpidemicData","state","epidemicDataAnalyse","data","dispatch","pandemicData","setPandemicData","pandemicSelect","setPandemicSelect","dateSelect","setDateSelect","isLoading","setIsLoading","showWeightTable","setShowWeightTable","weight","setWeight","isShowWeight","setIsShowWeight","weightList","setWeightList","infection_new","infection_average","infection_total","recovered_new","recovered_average","recovered_total","death_new","death_average","death_total","population","population_density","weightLabel","changePandemic","option","changeDate","date","changeIsShowWeight","event","target","checked","closeDialog","weightListTmp","forEach","e","index","Clust","U","map","province_id","province_name","level","C","tagField","keys","algorithm","run","then","result","X","cluster_label","console","log","catch","error","downloadFile","currentTime","Date","getTime","fileName","workbook","utils","book_new","worksheet","json_to_sheet","book_append_sheet","excelBuffer","write","bookType","type","blob","Blob","localStorage","getItem","HOME","fetchData","pandemicDataSrevice","res","dt","infectionLst","infection","list","recoveredLst","recovered","deathLst","death","infectionAverage","recoveredAverage","deathAverage","quantity_in_today","length","total_quantity","parseFloat","toFixed","children","_jsxFileName","lineNumber","columnNumber","className","pandemic_name","func","onChange","onClick","weightData","_c","$RefreshReg$"],"sources":["D:/Don't Click Here/2022_2/code_2/client/src/components/subscreen/expert/EpidemicAnalyse_New.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport MainFrame from '../../mainframe/MainFrame'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { PATH } from '../../../constant/constant';\r\nimport { getPandemicDataAPI, getEpidemicDataOfAllProvincesAPI } from '../../../service/userService'\r\nimport Dropdown from '../../dropdown/Dropdown';\r\nimport province from '../../../constant/province'\r\nimport MyDatePicker from '../../datepicker/DatePicker';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeEpidemicDataAnalyse, sortWithLevel, resetAllLevel } from '../../../store/reducer/epidemicDataAnalyseSlice';\r\n\r\n// Excel\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport WeightTable from './epidemictable/WeightTable';\r\nimport EpidemicTable_New from './epidemictable/EpidemicTable_New';\r\nimport S_SMC_FCM from '../../../logic/sSMC_FCM';\r\nimport WeightTableEpidemic from './epidemictable/WeightTableEpidemic';\r\n\r\nfunction EpidemicAnalyse_New() {\r\n  const navigate = useNavigate();\r\n  const EpidemicData = useSelector((state) => state.epidemicDataAnalyse.data);\r\n  const dispatch = useDispatch();\r\n\r\n  const [pandemicData, setPandemicData] = useState([]);\r\n  \r\n  const [pandemicSelect, setPandemicSelect] = useState(1);\r\n  const [dateSelect, setDateSelect] = useState(\"2022-07-15\");\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showWeightTable, setShowWeightTable] = useState(false);\r\n  const [weight, setWeight] = useState([1,1,1,1,1,1,1,1,1,1,1]);\r\n  const [isShowWeight, setIsShowWeight] = useState(false);\r\n  const [weightList, setWeightList] = useState({\r\n    infection_new: 1,\r\n    infection_average: 1,\r\n    infection_total: 1,\r\n    recovered_new: 1,\r\n    recovered_average: 1,\r\n    recovered_total: 1,\r\n    death_new: 1,\r\n    death_average: 1,\r\n    death_total: 1,\r\n    population: 1,\r\n    population_density: 1,\r\n  });\r\n\r\n  const weightLabel = [\r\n    'infection_new',\r\n    'infection_average',\r\n    'infection_total',\r\n    'recovered_new',\r\n    'recovered_average',\r\n    'recovered_total',\r\n    'death_new',\r\n    'death_average',\r\n    'death_total',\r\n    'population',\r\n    'population_density',\r\n  ]\r\n\r\n  const changePandemic = (option)=>{\r\n    // console.log('pandemic', pandemicData);\r\n    setPandemicSelect(2)\r\n  }\r\n\r\n  const changeDate = (date) => {\r\n    setDateSelect(date);\r\n  }\r\n\r\n  const changeIsShowWeight = (event) => {\r\n    setIsShowWeight(event.target.checked);\r\n  }\r\n\r\n  const closeDialog = (data)=>{\r\n    if(data){\r\n      setWeight(data);\r\n      let weightListTmp = weightList;\r\n      weightLabel.forEach((e, index)=>{\r\n        weightListTmp[e] = data[index];\r\n      });\r\n      setWeightList(weightListTmp);\r\n      // console.log(weightList);\r\n    }\r\n    setShowWeightTable(false);\r\n  }\r\n\r\n  const Clust = async () => {\r\n    let U = EpidemicData.map(e=>{\r\n      return {\r\n        \"province_id\": e.province_id,\r\n        \"province_name\": e.province_name,\r\n        \"population\": e.population,\r\n        \"population_density\": e.population_density,\r\n        \"level\": e.level,\r\n        \"infection_new\": e.infection_new,\r\n        \"infection_total\": e.infection_total,\r\n        \"infection_average\": e.infection_average,\r\n        \"recovered_new\": e.recovered_new,\r\n        \"recovered_total\": e.recovered_total,\r\n        \"recovered_average\": e.recovered_average,\r\n        \"death_new\": e.death_new,\r\n        \"death_total\": e.death_total,\r\n        \"death_average\": e.death_average,\r\n      }\r\n    });\r\n    // console.log(U, weightList);\r\n    const C = [1, 2, 3]; // Danh sách các nhãn cần phân cụm\r\n    \r\n    const tagField = 'level'; // Trường dữ liệu chứa nhãn\r\n    \r\n    const keys = ['province_name', 'province_id']; // Các trường dữ liệu không tham gia vào việc phân cụm\r\n    \r\n    // Tạo một đối tượng thuật toán phân cụm\r\n    const algorithm = new S_SMC_FCM(U, C, tagField, keys, weightList);\r\n    \r\n    // Chạy thuật toán\r\n    algorithm.run()\r\n      .then(() => {\r\n        // Khi thuật toán hoàn thành, lấy kết quả\r\n        const result = algorithm.X;\r\n        dispatch(changeEpidemicDataAnalyse({data: result.map(e=>{\r\n          return {\r\n            \"province_id\": e.province_id,\r\n            \"province_name\": e.province_name,\r\n            \"population\": e.population,\r\n            \"population_density\": e.population_density,\r\n            \"level\": e.cluster_label,\r\n            \"infection_new\": e.infection_new,\r\n            \"infection_total\": e.infection_total,\r\n            \"infection_average\": e.infection_average,\r\n            \"recovered_new\": e.recovered_new,\r\n            \"recovered_total\": e.recovered_total,\r\n            \"recovered_average\": e.recovered_average,\r\n            \"death_new\": e.death_new,\r\n            \"death_total\": e.death_total,\r\n            \"death_average\": e.death_average,\r\n          }\r\n        })}))\r\n        dispatch(sortWithLevel())\r\n        console.log(result);\r\n      })\r\n      .catch(error => {\r\n        console.error('Đã xảy ra lỗi:', error);\r\n      });\r\n  }\r\n\r\n  const downloadFile = () => {\r\n    const currentTime = new Date().getTime();\r\n    const fileName = `${currentTime}_EpidemicAnalyse.xlsx`;\r\n    // Tạo workbook mới\r\n    const workbook = XLSX.utils.book_new();\r\n\r\n    // Convert data to worksheet format\r\n    const worksheet = XLSX.utils.json_to_sheet(EpidemicData);\r\n    // console.log(fileName, workbook, worksheet);\r\n    // Append worksheet to workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');\r\n    // Write workbook to Excel file\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\r\n    // Create a Blob from the buffer\r\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    // Download the file\r\n    saveAs(blob, fileName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem('role') != 1){\r\n      navigate(PATH.HOME);\r\n    }\r\n    const fetchData = async () => {\r\n      try {\r\n        const pandemicDataSrevice = await getPandemicDataAPI();\r\n        setPandemicData(pandemicDataSrevice);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getEpidemicDataOfAllProvincesAPI(pandemicSelect, dateSelect);\r\n        data.forEach(e=>{\r\n          if(!e.level){\r\n            e.level = 0;\r\n          }\r\n        })\r\n        const res = data.map(dt=>{\r\n          const infectionLst = dt.infection.list;\r\n          const recoveredLst = dt.recovered.list;\r\n          const deathLst = dt.death.list;\r\n          let infectionAverage = 0;\r\n          let recoveredAverage = 0;\r\n          let deathAverage = 0;\r\n    \r\n          infectionLst.forEach(e=>{\r\n            infectionAverage += e.quantity_in_today;\r\n          });\r\n          recoveredLst.forEach(e=>{\r\n            recoveredAverage += e.quantity_in_today;\r\n          });\r\n          deathLst.forEach(e=>{\r\n            deathAverage += e.quantity_in_today;\r\n          });\r\n    \r\n          return {\r\n            province_id: dt.province_id,\r\n            province_name: province[dt.province_id-1],\r\n            population: dt.population,\r\n            population_density: dt.population_density,\r\n            level: dt.level,\r\n            infection_new: infectionLst[infectionLst.length-1].quantity_in_today,\r\n            infection_total: infectionLst[infectionLst.length-1].total_quantity,\r\n            infection_average: parseFloat((infectionAverage/(infectionLst.length)).toFixed(2)),\r\n            recovered_new: recoveredLst[recoveredLst.length-1].quantity_in_today,\r\n            recovered_total: recoveredLst[recoveredLst.length-1].total_quantity,\r\n            recovered_average: parseFloat((recoveredAverage/(recoveredLst.length)).toFixed(2)),\r\n            death_new: deathLst[deathLst.length-1].quantity_in_today,\r\n            death_total: deathLst[deathLst.length-1].total_quantity,\r\n            death_average: parseFloat((deathAverage/(deathLst.length)).toFixed(2)),\r\n          }\r\n        });\r\n        dispatch(changeEpidemicDataAnalyse({data: res}))\r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pandemicSelect, dateSelect]);\r\n\r\n\r\n  return (\r\n    <MainFrame>\r\n      <h1>Phân tích tình hình dịch bệnh</h1>\r\n      <div className=\"grid grid-cols-3 gap-4 mt-5\">\r\n        <div className=\"col-span-1\">\r\n          <Dropdown data={pandemicData.map(e=>e.pandemic_name)} func={changePandemic}/>\r\n          <MyDatePicker func={changeDate}/>\r\n          <div className=\"w-full mt-4\">\r\n            <label className='text-lg flex items-center'>\r\n              <input className='h-6 w-6' type=\"checkbox\" checked={isShowWeight} onChange={changeIsShowWeight} />\r\n              <span className='ml-1'>Xem trọng số</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-span-1\"></div>\r\n        <div className=\"col-span-1\">\r\n          <div className=\"btn btn-primary w-full\" onClick={()=>{setShowWeightTable(true)}}>Thiết lập trọng số</div>\r\n          {showWeightTable && <WeightTableEpidemic data={weight} func={closeDialog}/>}\r\n          <div className=\"btn btn-primary w-full mt-4\" onClick={Clust}>Phân cụm</div>\r\n          <div className=\"btn btn-success w-full mt-4\" onClick={downloadFile}>Download dữ liệu</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-5\">\r\n        <EpidemicTable_New weightData={weight} isShowWeight={isShowWeight} />\r\n\r\n      </div>\r\n    </MainFrame>\r\n  )\r\n}\r\n\r\nexport default EpidemicAnalyse_New"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}