{"ast":null,"code":"var _jsxFileName = \"D:\\\\Don't Click Here\\\\2022_2\\\\code_2\\\\client\\\\src\\\\components\\\\subscreen\\\\expert\\\\EpidemicAnalyse.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport MainFrame from '../../mainframe/MainFrame';\nimport { getEpidemicDataAPI, getPandemicDataAPI } from '../../../service/userService';\nimport LineChart from '../../chart/LineChart';\nimport Dropdown from '../../dropdown/Dropdown';\nimport province from './../../../constant/province';\nimport MyDatePicker from '../../datepicker/DatePicker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EpidemicAnalyse() {\n  _s();\n  const [pandemicData, setPandemicData] = useState([]);\n  const [provinceSelect, setProvinceSelect] = useState(1);\n  const [pandemicSelect, setPandemicSelect] = useState(1);\n  const [dateSelect, setDateSelect] = useState(\"2022-07-15\");\n  const [chartData, setChartData] = useState({\n    labels: ['No name'],\n    datasets: [{\n      label: \"No name\",\n      data: [0]\n    }]\n  });\n  const getEpidemicData = async (province_id, pandemic_id, date) => {\n    const data = await getEpidemicDataAPI(province_id, pandemic_id, date);\n    console.log({\n      province_id,\n      pandemic_id,\n      date\n    });\n    setChartData({\n      labels: data.dateRange,\n      datasets: [{\n        label: data.infection.title,\n        data: data.infection.list.map(e => e.quantity_in_today),\n        borderColor: 'blue',\n        backgroundColor: 'blue'\n      }, {\n        label: data.recovered.title,\n        data: data.recovered.list.map(e => e.quantity_in_today),\n        borderColor: 'green',\n        backgroundColor: 'green'\n      }, {\n        label: data.death.title,\n        data: data.death.list.map(e => e.quantity_in_today),\n        borderColor: 'red',\n        backgroundColor: 'red'\n      }]\n    });\n  };\n  const changeOption = order => {};\n  const changePandemic = option => {\n    console.log('pandemic' + pandemicData);\n    setPandemicSelect(2);\n  };\n  const changeProvince = option => {\n    const province_id = province.indexOf(option) + 1;\n    setProvinceSelect(province_id);\n  };\n  const changeDate = date => {\n    setDateSelect(date);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const pandemicDataSrevice = await getPandemicDataAPI();\n        setPandemicData(pandemicDataSrevice);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n    getEpidemicData(provinceSelect, 2, dateSelect);\n  }, [provinceSelect, pandemicSelect, dateSelect]);\n  return /*#__PURE__*/_jsxDEV(MainFrame, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ph\\xE2n t\\xEDch t\\xECnh h\\xECnh d\\u1ECBch b\\u1EC7nh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-4 mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-1 \",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          data: province,\n          func: changeProvince\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          data: pandemicData.map(e => e.pandemic_name),\n          func: changePandemic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyDatePicker, {\n          func: changeDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-span-3\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(EpidemicAnalyse, \"10BVLaugYb5/oF3gh75G5Dp+dlI=\");\n_c = EpidemicAnalyse;\nexport default EpidemicAnalyse;\nvar _c;\n$RefreshReg$(_c, \"EpidemicAnalyse\");","map":{"version":3,"names":["useState","useEffect","MainFrame","getEpidemicDataAPI","getPandemicDataAPI","LineChart","Dropdown","province","MyDatePicker","jsxDEV","_jsxDEV","EpidemicAnalyse","_s","pandemicData","setPandemicData","provinceSelect","setProvinceSelect","pandemicSelect","setPandemicSelect","dateSelect","setDateSelect","chartData","setChartData","labels","datasets","label","data","getEpidemicData","province_id","pandemic_id","date","console","log","dateRange","infection","title","list","map","e","quantity_in_today","borderColor","backgroundColor","recovered","death","changeOption","order","changePandemic","option","changeProvince","indexOf","changeDate","fetchData","pandemicDataSrevice","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","func","pandemic_name","_c","$RefreshReg$"],"sources":["D:/Don't Click Here/2022_2/code_2/client/src/components/subscreen/expert/EpidemicAnalyse.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport MainFrame from '../../mainframe/MainFrame'\r\nimport { getEpidemicDataAPI, getPandemicDataAPI } from '../../../service/userService'\r\nimport LineChart from '../../chart/LineChart';\r\nimport Dropdown from '../../dropdown/Dropdown';\r\nimport province from './../../../constant/province'\r\nimport MyDatePicker from '../../datepicker/DatePicker';\r\n\r\nfunction EpidemicAnalyse() {\r\n\r\n  const [pandemicData, setPandemicData] = useState([]);\r\n  \r\n  const [provinceSelect, setProvinceSelect] = useState(1);\r\n  const [pandemicSelect, setPandemicSelect] = useState(1);\r\n  const [dateSelect, setDateSelect] = useState(\"2022-07-15\");\r\n\r\n  const [chartData, setChartData] = useState({\r\n    labels: ['No name'],\r\n    datasets: [\r\n      {\r\n        label: \"No name\",\r\n        data: [0],\r\n      }\r\n    ]\r\n  });\r\n\r\n  const getEpidemicData = async (province_id, pandemic_id, date) => {\r\n    const data = await getEpidemicDataAPI(province_id, pandemic_id, date);\r\n    console.log({province_id, pandemic_id, date});\r\n    setChartData({\r\n      labels: data.dateRange,\r\n      datasets: [\r\n        {\r\n          label: data.infection.title,\r\n          data: data.infection.list.map(e=>e.quantity_in_today),\r\n          borderColor: 'blue',\r\n          backgroundColor: 'blue'\r\n        },\r\n        {\r\n          label: data.recovered.title,\r\n          data: data.recovered.list.map(e=>e.quantity_in_today),\r\n          borderColor: 'green',\r\n          backgroundColor: 'green'\r\n        },\r\n        {\r\n          label: data.death.title,\r\n          data: data.death.list.map(e=>e.quantity_in_today),\r\n          borderColor: 'red',\r\n          backgroundColor: 'red'\r\n        },\r\n      ]\r\n    })\r\n  }\r\n\r\n  const changeOption = (order) => {\r\n  }\r\n\r\n  const changePandemic = (option)=>{\r\n    console.log('pandemic' + pandemicData);\r\n    setPandemicSelect(2)\r\n  }\r\n\r\n  const changeProvince = (option)=>{\r\n    const province_id = province.indexOf(option) + 1;\r\n    setProvinceSelect(province_id);\r\n  }\r\n\r\n  const changeDate = (date) => {\r\n    setDateSelect(date);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const pandemicDataSrevice = await getPandemicDataAPI();\r\n        setPandemicData(pandemicDataSrevice);\r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n    getEpidemicData(provinceSelect, 2, dateSelect );\r\n  }, [provinceSelect, pandemicSelect, dateSelect]);\r\n\r\n  return (\r\n    <MainFrame>\r\n      <h1>Phân tích tình hình dịch bệnh</h1>\r\n      <div className=\"grid grid-cols-4 gap-4 mt-5\">\r\n        <div className=\"col-span-1 \">\r\n          <Dropdown \r\n            data={province} func={changeProvince} \r\n          />\r\n          <Dropdown data={pandemicData.map(e=>e.pandemic_name)} func={changePandemic} \r\n          />\r\n          <MyDatePicker func={changeDate}/>\r\n        </div>\r\n        <div className=\"col-span-3\">\r\n          <LineChart data={chartData} />\r\n        </div>\r\n      </div>\r\n    </MainFrame>\r\n  )\r\n}\r\n\r\nexport default EpidemicAnalyse"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}